<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KyneSilverhide</title>
  <subtitle>Sharing some of my developper experiences to the world</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kynesilverhide.github.io/"/>
  <updated>2017-03-12T14:48:10.464Z</updated>
  <id>http://kynesilverhide.github.io/</id>
  
  <author>
    <name>KyneSilverhide</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DIY Arcade Controller</title>
    <link href="http://kynesilverhide.github.io/2017/03/12/DIY-Arcade-Controller/"/>
    <id>http://kynesilverhide.github.io/2017/03/12/DIY-Arcade-Controller/</id>
    <published>2017-03-12T11:39:45.000Z</published>
    <updated>2017-03-12T14:48:10.464Z</updated>
    
    <content type="html"><![CDATA[<p>Do you still have your raspberry somewhere on your desk or near your TV? Great ! Because we can go to the next level and build our own arcade controller with an embedded console.<br>How? By putting the raspberry itself inside our arcade stick !</p>
<a id="more"></a>
<p>First and foremost, this guide will be slightly different than the previous ones, mainly because it won’t be as detailed. I’ll provide as many information as possible on each steps, but depending on the materials and skills at disposal, you may choose
  a completely different solution. I also forgot to take pictures of the building processed, but provided a link to someone else’s guide that is very similar.</p>
<h1 id="What-we-will-build">
  <a href="#What-we-will-build" class="headerlink" title="What we will build"></a>What we will build</h1><img src="/2017/03/12/DIY-Arcade-Controller/arcade-controller01.jpg" alt="The finished Arcade Controller" title="The finished Arcade Controller">
<p>This arcade controller (or stick) is basically a box, some holes, a joystick, buttons, and a raspberry pi attached together. Based on your skills, you can either build the box yourself, use metal, re-use a cheap plastic controller, or even build it with
  legos or transparent glass.</p>
<h1 id="What-do-we-need">
  <a href="#What-do-we-need" class="headerlink" title="What do we need"></a>What do we need</h1>
<ul>
  <li>An arcade kit (buttons, cable, joystick, encoder) <strong>OR</strong> separate parts</li>
  <li>A Raspberry Pi</li>
  <li>A long HDMI cable <em>(unless you want to play close to your screen, I picked a 3m long cable)</em></li>
  <li>A long power adapter <em>(cheap models may not work with very long cable, so I picked a 2m long cable and checked it was compatible with a Raspberry Pi 3)</em></li>
</ul>
<h2 id="The-arcade-kit">
  <a href="#The-arcade-kit" class="headerlink" title="The arcade kit"></a>The arcade kit</h2>
<p>This is the part where you’ll have to choose what kind of buttons you want, and balance price and quality.<br>Typically, there are two “families” of buttons and sticks : American ones (<a href="https://www.google.be/search?q=Happ+kits+arcade&amp;tbm=isch" target="_blank" rel="external">HAPP</a>,
  and Japanese ones (<a href="https://www.google.be/search?q=sanwa+kits+arcade&amp;tbm=isch" target="_blank" rel="external">Sanwa</a>, Seimitsu…).<br>American buttons are concave, and the sticks looks like a car shift. Japanese buttons are convex, while their sticks is literally a
  ball on a shaft.</p>
<p>To plug all these buttons, the easiest way is to use and USB encoder. This will allow you to plug all your buttons and sticks into a small board with an USB output. In theory, you can mix and match these buttons and sticks, as long as the encoder supports
  both <em>(Japanese joysticks use a single pin connector, while HAPP joysticks use four smaller connectors)</em>. </p>
<p>There are tons of kits available. If you want the best quality, you’ll have to buy the more expansive Sanwa, Seimitsu and HAPP parts. If, like me, you first want to try things without investing too much money, you’ll probably find what you want on Amazon
  or Ebay. </p>
<p>If you want, buttons can also come equipped with LEDs. If you stick to 5V LEDs, you should be able to power them via the USB port of your raspberry. Some kits use 12V LEDs that will require a dedicated power supply, so I strongly recommend to only buy
  these if you want to build a <a href="https://www.google.be/search?q=bartop+cabinet&amp;tbm=isch" target="_blank" rel="external">bartop cabinet</a> instead.</p>
<p>I myself bought <a href="http://www.ebay.com/itm/182388516489?_trksid=p2060353.m2749.l2649&amp;var=484958786510&amp;ssPageName=STRK%3AMEBIDX%3AIT" target="_blank" rel="external">this kit on Ebay</a>.<br>I was very satisfied with the quality, relatively fast shipping (from China to
  Belgium), and support from the seller. Unfortunately, three of the eleven <em>(10 and 1 spare)</em> LEDs were not working. I contacted the seller and they sent me new LEDs that should arrive soon.<br><img src="/2017/03/12/DIY-Arcade-Controller/arcade-controller02.jpg" alt="Easyget Chrome Kit" title="Easyget Chrome Kit"></p>
<h3 id="Pick-a-stick">
  <a href="#Pick-a-stick" class="headerlink" title="Pick a stick"></a>Pick a stick</h3>
<p>You can pick any stick you want, as long as you choose a compatible USB encoder <em>(see below)</em>. Based on your preferences, you can have a look at <em>(or replace later)</em> the restrictor gate <em>(there are multiple shapes : a circle, a square, a line, an octogon…)</em>.</p>
<div class="justified-gallery"><br><img src="arcade-controller05.jpg" alt=""><br><img src="arcade-controller06.jpg" alt=""><br><img src="https://cdn1.bigcommerce.com/server6200/ajh2rr5h/product_images/uploaded_images/u360-restrictors.jpg" alt=""><br></div>

<h3 id="Pick-buttons">
  <a href="#Pick-buttons" class="headerlink" title="Pick buttons"></a>Pick buttons</h3>
<p>Buttons also come in many shapes : concave, convex, large or small, with or without a LED. Some can be screwed in, some have to be snapped in.<br>If you are working with thick wood planks, ensure the button is high enough. Most buttons requires 28-30mm
  holes, while smaller ones usually fit into a 24mm hole <em>(you may need to convert into inches…)</em>.<br><strong> Be very careful</strong> :</p>
<ul>
  <li>Find how many buttons you need. While SNES games only requires 8 buttons, you may need a bit more for other consoles. Most kit will include 10 buttons. This will allow you to emulate X, Y, A, B, L1, R1, L2, R2, Start and Select. </li>
  <li>If you are using Recalbox (my tutorial <a href="https://kynesilverhide.github.io/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/">here</a>, more information <a href="https://www.recalbox.com/" target="_blank" rel="external">here</a>), you’ll need another “hotkey”
    button. I decided to switch to Retropie instead, because they use a “Start + Select” combination instead. Or you can simply get rid of the “L2” and “R2” buttons.</li>
</ul>
<p>I decided to go “full on bling” with these 5V led “chrome” buttons.</p>
<div class="justified-gallery"><br><img src="arcade-controller03.jpg" alt=""><br></div>

<h3 id="Pick-an-USB-encoder">
  <a href="#Pick-an-USB-encoder" class="headerlink" title="Pick an USB encoder"></a>Pick an USB encoder</h3>
<p>Unless you want to get the top quality encoder to ensure your SNES game won’t have a pico-second input delay, any encoder is fine. Double-check that the pins are compatible with your joysticks, and support enough buttons (most encoder, even cheap ones,
  support up to 12 buttons, and both joystick types).<br>Pick one that is bundled with the proper USB cable, to make things easier.</p>
<div class="justified-gallery"><br><img src="arcade-controller04.jpg" alt=""><br></div>

<h3 id="Don’t-forget-the-cables">
  <a href="#Don’t-forget-the-cables" class="headerlink" title="Don’t forget the cables"></a>Don’t forget the cables</h3>
<p>If you are buying a kit, everything should be OK. Otherwise, you’ll need to do the wirings yourself. I’ve included a schema of my encoder below. Note that basic buttons only requires two wires (5V and ground), while LED buttons will require four wires
  (5V Led, 5V button, led ground, button ground).<br>Sometimes, the wires will all be attached to a single connector. Sometimes, you’ll have to make a daisy chain plugged to the encoder “ground”. You should find proper instructions with your USB encoder.</p>
<div class="justified-gallery"><br><img src="arcade-controller07.jpg" alt=""><br><img src="arcade-controller-wire.jpg" alt=""><br></div>

<h1 id="Instructions">
  <a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h1>
<h2 id="With-Ikea-components">
  <a href="#With-Ikea-components" class="headerlink" title="With Ikea components"></a>With Ikea components</h2>
<p>If you want the easy way, someone on the internet decided to do the same thing, but using IKEA parts for the box.<br>You can find detailed informations on its website : <a href="http://bambooarcade.com/" target="_blank" rel="external">http://bambooarcade.com/</a></p>
<p>
  <div class="justified-gallery"><br><img src="http://bambooarcade.com/wp-content/uploads/2016/11/milo_image.jpg" alt=""><br></div><br>“Simply” follow the instructions and you should be good.</p>
<h2 id="With-anything-else">
  <a href="#With-anything-else" class="headerlink" title="With anything else"></a>With anything else</h2>
<p>If you want to improvise, you’ll need to build a big-enough box and print some button layouts.<br>I used the same layout as the one posted in the IKEA section (<a href="http://bambooarcade.com/downloads/" target="_blank" rel="external">http://bambooarcade.com/downloads/</a>), but I
  changed the button position slightly using <a href="www.adobe.com/Illustrator‎">Adobe Illustrator</a> <em>(there is a 7 days trial)</em>. You should be able to use <a href="https://inkscape.org/en/" target="_blank" rel="external">Inkscape</a> on Ubuntu if you want to edit the layout.
  Otherwise, simply use the PDFs from the download section.</p>
<img src="/2017/03/12/DIY-Arcade-Controller/arcade-layout.png" alt="The layout I used. Only print from the original PDF, not this picture !" title="The layout I used. Only print from the original PDF, not this picture !">
<p>If you print this layout, make sure you don’t use any zoom, custom margins or “fit to page” options. You can check that the layout is properly printed by using the included scale <em>(there are two 125mm lines, horizontal and vertical, on the layout)</em>.</p>
<p>First, I used some wood plank, put the layout on top, and drilled the holes my marking the center first <em>(use a screwdriver)</em><br>Then, I put everything together to test the buttons. You can use <a href="http://html5gamepad.com/" target="_blank" rel="external">this HTML5 website</a>  to test that everything works.<br><img src="/2017/03/12/DIY-Arcade-Controller/arcade-controller08.jpg" alt="Prototype Board" title="Prototype Board"></p>
<p>Then, I decided to scale down the board to fit a simple A4 sheet of paper <em>(more or less…)</em>.<br>Don’t worry, you can fit everything inside, even with large buttons and four cables each.<br>I then built a wooden box and painted it black. I kept
  a hole on the side <em>(see below)</em> to be able to access the Raspberry Pi USB, HDMI and power plugs.<br><img src="/2017/03/12/DIY-Arcade-Controller/arcade-controller09.jpg" alt="Painted box, final size" title="Painted box, final size"></p>
<p>I was not very happy with the black painting, so I decided to use some vinyl overlay. At first, I wanted to design my own overlay, but I struggled to find a way to print it without ordering from the USA. I also had problems with colors, as most of these
  services are related to advertising, and requires specific color profiles. So in the end, I went for a “fake carbon” overlay, such as this <a href="http://www.ebay.com/itm/24-x60-4D-Black-Premium-Gloss-Carbon-Fiber-Vinyl-Wrap-Sticker-Decal-BubbleFree-/131209618262" target="_blank" rel="external">one</a>.<br>I
  covered the top board, and used blades to cut the holes. </p>
<p>Then, I screwed back the buttons, the USB encoder, the stick, and the Raspberry Pi on the side. Be careful, if your screws are longer than the thickness of the board, you may need to use screw washers.<br><img src="/2017/03/12/DIY-Arcade-Controller/arcade-controller10.jpg" alt="Inside the board" title="Inside the board"></p>
<p>Finally, I attached all the cables and… Wow, that’s a mess.<br><img src="/2017/03/12/DIY-Arcade-Controller/arcade-controller11.jpg" alt="Inside the board, with cables" title="Inside the board, with cables"></p>
<p>As you can guess, using the provided cables is very easy, but none of them has the optimal length. In the end, I don’t care at all, because all of this will be hidden, and I don’t really want to bother with cable management.<br>I just had to close back
  the box, screw the top board, and everything was ready for the final test.<br><img src="/2017/03/12/DIY-Arcade-Controller/arcade-controller01.jpg" alt="The finished Arcade Controller" title="The finished Arcade Controller"></p>
<h1 id="Final-steps">
  <a href="#Final-steps" class="headerlink" title="Final steps"></a>Final steps</h1>
<p>I plugged my HDMI cable to my TV, then to the Raspberry, and did the same with the power plug.<br>Retropie booted with no problem and started installing by itself. I configured each buttons, copied some games using an USB stick, and tested right away.<br>I
  was very pleased to see that everything works as expected :)</p>
<h1 id="If-I-had-to-do-it-again-would-I-follow-the-same-steps">
  <a href="#If-I-had-to-do-it-again-would-I-follow-the-same-steps" class="headerlink" title="If I had to do it again, would I follow the same steps?"></a>If I had to do it again, would I follow the same steps?</h1>
<p>Yes, probably. But there are indeed some minor things that are not perfect.</p>
<ul>
  <li>First, the cables are a mess. It doesn’t matter, as I didn’t even bother to paint the inside of the box, and I don’t want to use custom cables.</li>
  <li>The buttons works fine, but are a bit hard to push. I may buy better microswitches later on, at least for the most used buttons.</li>
  <li>The provided USB cable is very long, because it’s supposed to be plugged to a consoler near the TV, not just next to the encoder itself. This is fine, because I let the cable outside the box, and directly into one of the USB ports.<img src="/2017/03/12/DIY-Arcade-Controller/arcade-controller12.jpg" alt="Inside the board, with cables" title="Inside the board, with cables"> In theory, I should be able to unplug the controller, and plug it back to my computer, another Raspberry, or a console <em>(but I don’t think the default button mapping will be practical)</em>.
    I can even plug a gamepad for specific games, or for multiplayer games.</li>
  <li>The box is not perfect, but I’m very happy with the final size and weight. </li>
  <li>I could have used plexiglass on top of the vinyl overlay. But this works better if the top board is a bit lower than the side planks.</li>
</ul>
<p>I hope this tutorial will help you choose the right parts and build your own arcade controller.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Do you still have your raspberry somewhere on your desk or near your TV? Great ! Because we can go to the next level and build our own arcade controller with an embedded console.&lt;br&gt;How? By putting the raspberry itself inside our arcade stick !&lt;/p&gt;
    
    </summary>
    
      <category term="Gaming" scheme="http://kynesilverhide.github.io/categories/Gaming/"/>
    
      <category term="Raspberry Pi" scheme="http://kynesilverhide.github.io/categories/Gaming/Raspberry-Pi/"/>
    
    
      <category term="retropie" scheme="http://kynesilverhide.github.io/tags/retropie/"/>
    
      <category term="arcade" scheme="http://kynesilverhide.github.io/tags/arcade/"/>
    
      <category term="diy" scheme="http://kynesilverhide.github.io/tags/diy/"/>
    
      <category term="controller" scheme="http://kynesilverhide.github.io/tags/controller/"/>
    
      <category term="stick" scheme="http://kynesilverhide.github.io/tags/stick/"/>
    
  </entry>
  
  <entry>
    <title>Exporting a VirtualBox image to VMWare</title>
    <link href="http://kynesilverhide.github.io/2016/12/21/Exporting-a-VirtualBox-image-to-VMWare/"/>
    <id>http://kynesilverhide.github.io/2016/12/21/Exporting-a-VirtualBox-image-to-VMWare/</id>
    <published>2016-12-21T13:11:09.000Z</published>
    <updated>2016-12-21T14:15:35.031Z</updated>
    
    <content type="html"><![CDATA[<p>In the first posts, I showed you how to install Ubuntu in <a href="https://www.virtualbox.org/" target="_blank" rel="external">VirtualBox</a>. I did choose VirtualBox because the installation didn’t seem to work in <a href="http://www.vmware.com/products/player/playerpro-evaluation.html" target="_blank" rel="external">VmWare Player</a>  <em>(Another well know product for creating and running operating systems and applications in a virtual machine)</em>. Unfortunately, I also encountered some bugs in VirtualBox whenever I tried to enable 3D acceleration (screenshots were black, and
  <a href="https://atom.io/" target="_blank" rel="external">Atom</a> was not starting properly).</p>
<p>So after some search, I found out it’s actually quite easy to migrate a working image from VirtualBox to VMWare Player.<br>
  <a id="more"></a>
</p>
<h1 id="Exporting-from-VirtualBox">
  <a href="#Exporting-from-VirtualBox" class="headerlink" title="Exporting from VirtualBox"></a>Exporting from VirtualBox</h1>
<p>Start VirtualBox, go to the Menu and selected <strong>Export Appliance…</strong><br><img src="/2016/12/21/Exporting-a-VirtualBox-image-to-VMWare/export01.png" alt="Exporting Step 1" title="Exporting Step 1"></p>
<p>Simply follow the guide and keep the default values (double check where you want to export the file)<br><img src="/2016/12/21/Exporting-a-VirtualBox-image-to-VMWare/export02.png" alt="Exporting Step 2" title="Exporting Step 2"><br><img src="/2016/12/21/Exporting-a-VirtualBox-image-to-VMWare/export03.png" alt="Exporting Step 3" title="Exporting Step 3"><br><img src="/2016/12/21/Exporting-a-VirtualBox-image-to-VMWare/export04.png" alt="Exporting Step 4" title="Exporting Step 4"></p>
<p>At the end, the export will start. Depending on the size of your image, it may takes some time…<br><img src="/2016/12/21/Exporting-a-VirtualBox-image-to-VMWare/export05.png" alt="Exporting Step 5" title="Exporting Step 5"></p>
<h1 id="Importing-into-VmWare-Player">
  <a href="#Importing-into-VmWare-Player" class="headerlink" title="Importing into VmWare Player"></a>Importing into VmWare Player</h1>
<p>Once the export has been successfully completed, it’s time to import it. You can close VirtualBox, and starts VMWare Player.<br>If you have not yet installed VmWare Player, you can download it here : <a href="https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_workstation_player/12_0" target="_blank" rel="external">https://my.vmware.com/web/vmware/free#desktop_end_user_computing/vmware_workstation_player/12_0</a><br>I
  don’t think VMWare exists on MacOSX, but as I said, you probably won’t need Ubuntu if you are on a Mac.</p>
<p>Go to “Open a Virtual Machine” and browse to the exported <code>.ova</code> file<br><img src="/2016/12/21/Exporting-a-VirtualBox-image-to-VMWare/import01.png" alt="Importing Step 1" title="Importing Step 1"><br>You’ll probbaly see a warning, but you can
  ignore it safely, and hit “Retry”<br><img src="/2016/12/21/Exporting-a-VirtualBox-image-to-VMWare/import02.png" alt="Importing Step 2" title="Importing Step 2"><br>The import should start quickly… but once again, the whole process will takes time.<br>
  <img src="/2016/12/21/Exporting-a-VirtualBox-image-to-VMWare/import03.png" alt="Importing Step 3" title="Importing Step 3"></p>
<p>Most tutorial will leave you here, with a working image. But even if it starts, it won’t run properly as you were used to.</p>
<h1 id="Final-Configuration">
  <a href="#Final-Configuration" class="headerlink" title="Final Configuration"></a>Final Configuration</h1>
<p>Edit the settings of the imported machine (you can safely delete the exported <code>.ova</code>) by right clicking on the image in the list.</p>
<ul>
  <li>Double check the CPU and memory, to ensure the values were properly imported.</li>
  <li>Add a soundcard to the list (use the default values or pick one if you have multiple soundcards or output ports. In my case, I chose the optical output “SPDIF”)</li>
  <li>You can also enable 3D acceleration back, and increase the allowed memory to 2Gb (maybe more, maybe less, depending on your hardware) in the “Display” section.</li>
  <li>You should also probably add USB controller support, just in case you need to plug an external device.<img src="/2016/12/21/Exporting-a-VirtualBox-image-to-VMWare/config02.png" alt="Adding USB ports and soundcards" title="Adding USB ports and soundcards">
  </li>
</ul>
<p>Switch to the other tab and add your shared folders.<br><img src="/2016/12/21/Exporting-a-VirtualBox-image-to-VMWare/config01.png" alt="Importing Step 1" title="Importing Step 1"></p>
<h1 id="Starting-the-machine">
  <a href="#Starting-the-machine" class="headerlink" title="Starting the machine"></a>Starting the machine</h1>
<p>You should now be able to start your Ubuntu machine. I a dialog appears, choose “I copied it”.<br>If everything went fine, you should have your environment back.<br><strong>I recommend to install the VMWare tools</strong> from the VMWare Menu <em>(note that in my case, the option has switched to “Update”, because I already installed everything before)</em>.<br>
  <img src="/2016/12/21/Exporting-a-VirtualBox-image-to-VMWare/starting01.png" alt="Installing the VM Tools" title="Installing the VM Tools"></p>
<p>Ubuntu should automatically mount the tools CD-ROM. Copy the archive somewhere else on your desktop, and extract it <em>(you can simply right click, you don’t need to use the terminal)</em>.<br>Finally, open the terminal, go to the extracted folder and
  run the second command<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td>
        <td class="code"><pre><div class="line">cd ~/path/to/extracted/tools/</div><div class="line">sudo vmware-config-tools.pl</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>You should keep the default answer to all questions. Note that the very first question will probably recommend you to use install from a package instead, but most tutorials are still using the old version, so I decided to do the same.</p>
<p>Once finished, you should probably restart Ubuntu.</p>
<h2 id="Shared-folders-tweak">
  <a href="#Shared-folders-tweak" class="headerlink" title="Shared folders tweak"></a>Shared folders tweak</h2>
<p>In my case, Shared folders didn’t work, even after a restart.<br>I had to run this command to reconfigure the <strong>VMWare Tools</strong> with the proper driver<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">sudo vmware-config-tools.pl -d --clobber-kernel-modules=vmhgfs</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>Once done, simply go to <code>/mnt/hgfs/</code> using the File Explorer, and you’ll find your shared folders.<br>You can them drag&amp;drop the folder to the left menu, in order to create a shortcut.</p>
<h2 id="Broken-resolution">
  <a href="#Broken-resolution" class="headerlink" title="Broken resolution?"></a>Broken resolution?</h2>
<p>In my case, my resolution (1920*1080) didn’t appear in Ubuntu, so I had to choose between a tiny window, or something too large.<br>I manually created a custom resolution, but I’m not sure this is the proper fix.</p>
<p>Anyway, if you encounter the same problem, you can run these commands.<br>first, use cvt, followed by the height, width and refresh rate.<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">cvt 1920 1080 60</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>Paste the value returned by the first command, starting after “Modline”<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td>
        <td class="code"><pre><div class="line">xrandr --newmode &quot;1920x1080_60.00&quot;  173.00  1920 2048 2248 2576  1080 1083 1088 1120 -hsync +vsync</div><div class="line">xrandr --addmode Virtual1 &quot;1920x1080_60.00&quot;</div><div class="line">xrandr --output Virtual1 --mode &quot;1920x1080_60.00&quot;</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>If <strong>Virtual1</strong> is not your display name, simply type <code>xrandr</code> with no parameter to print your display name.<br>Your new resolution should now be applied, and listed in the “System Settings &gt; Display” menu.</p>
<h1 id="Conclusion">
  <a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1>
<p>Congratulations, you now have another Ubuntu machine with proper 3D acceleration.<br>For now, everything seems to work as expected, but the boot is slower on my machine. I’ll continue investigating to see if it’s normal, or if I messed up something in
  the configuration.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In the first posts, I showed you how to install Ubuntu in &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt;. I did choose VirtualBox because the installation didn’t seem to work in &lt;a href=&quot;http://www.vmware.com/products/player/playerpro-evaluation.html&quot;&gt;VmWare Player&lt;/a&gt;  &lt;em&gt;(Another well know product for creating and running operating systems and applications in a virtual machine)&lt;/em&gt;. Unfortunately, I also encountered some bugs in VirtualBox whenever I tried to enable 3D acceleration (screenshots were black, and
  &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; was not starting properly).&lt;/p&gt;
&lt;p&gt;So after some search, I found out it’s actually quite easy to migrate a working image from VirtualBox to VMWare Player.&lt;br&gt;
    
    </summary>
    
      <category term="Virtualization" scheme="http://kynesilverhide.github.io/categories/Virtualization/"/>
    
    
      <category term="virtualbox" scheme="http://kynesilverhide.github.io/tags/virtualbox/"/>
    
      <category term="vmware" scheme="http://kynesilverhide.github.io/tags/vmware/"/>
    
      <category term="migration" scheme="http://kynesilverhide.github.io/tags/migration/"/>
    
  </entry>
  
  <entry>
    <title>A cheap retro-gaming solution : the Raspberry PI (Part 2)</title>
    <link href="http://kynesilverhide.github.io/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/"/>
    <id>http://kynesilverhide.github.io/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/</id>
    <published>2016-12-19T16:59:57.000Z</published>
    <updated>2016-12-19T18:36:35.603Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome back to this second part of the retro-gaming tutorial. Now that we have a working Raspberry, let’s install <a href="https://www.recalbox.com/" target="_blank" rel="external">RecalBox</a>. Recalbox <em>(or <strong>RecalBoxOS</strong> should I say)</em> is a free, open source
  operating system designed to work on Raspberry machines (and equivalent). Basically, it’s a bundle of emulators to play almost any old games, with a very user friendly interface on top of it, designed to be used on a TV.</p>
<a id="more"></a>
<h1 id="Getting-RecalBox">
  <a href="#Getting-RecalBox" class="headerlink" title="Getting RecalBox"></a>Getting RecalBox</h1>
<p>First, you’ll have to download RecalBox from here : <a href="https://github.com/recalbox/recalbox-os/releases" target="_blank" rel="external">https://github.com/recalbox/recalbox-os/releases</a>. Simply pick the last <code>.zip</code> file and download it somewhere on your computer.<br>Next,
  you’ll need to plug your micro SD card in a card slot, or some kind of card reader. In my case, I have this small USB device that can read a lot of formats.<br><img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/cardreader.jpg" alt="Card reader" title="Card reader"><br>As I said in the previous post, you’ll only need this once, so if you don’t have one, you may be able to borrow it.</p>
<p><strong>This will remove everything from your card</strong>. You may have to double-check that you did backup all your photos first, or whatever content that may have been on the card.<br><strong>On Windows</strong> and <strong>MAC</strong>, you can format
  your card using <a href="https://www.sdcard.org/downloads/formatter_4/" target="_blank" rel="external">SD Card Formatter 4</a>.<br><img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/format-sdcard.png" alt="Formatting the SDCard" title="Formatting the SDCard"><br><em>Note that I don’t know why Windows is listing my 32Gb card as a “600Mb” USB device…</em></p>
<p>On <strong>Ubuntu</strong>, you can use <strong>GParted</strong>. Simply pick “Fat32” and start the process.<br>Once the card is empty, unzip the <code>.zip</code> you downloaded before onto the card (it should appear in your File Explorer).</p>
<p>Once the process is finished, simply plug the card back into the Raspberry PI. Check one last time that your gamepad is plugged. If you are using an Ethernet connection, you shouldn’t have any problem. If you are using the WiFi, you’ll need one USB Keyboard
  to type in the WiFi SSID and password.<br><img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/raspberrycables.jpg" alt="My Raspberry PI" title="My Raspberry PI"></p>
<h2 id="Starting-Recalbox">
  <a href="#Starting-Recalbox" class="headerlink" title="Starting Recalbox"></a>Starting Recalbox</h2>
<p>Once the power supply is plugged, the Raspberry will start, and Recalbox will install. The installation shouldn’t require any input, so just wait a bit.<br>Unfortunately, I didn’t find how to take screenshot from Recalbox <em>(if you are not running a game)</em>,
  so instead, I had to take photos with my smartphone…<br>As you will see, the picture quality is just average when directly aiming at my monitor, even if the room is fully lit.<br><img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/recalbox00.jpg" alt="Loading Recalbox" title="Loading Recalbox"></p>
<p>If everything went fine, you’ll see the main screen. Note that you will only see consoles (well.. emulators) if you have at least one game installed. By default, Recalbox comes with some free games, so you should see at least one or two consoles listed.<br>
  <img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/recalbox01.jpg" alt="Main screen" title="Main screen"></p>
<h2 id="Controller">
  <a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2>
<p>Most USB gamepads should be recognized, and some buttons should work out of the box, to navigate though the menus. If not, use an USB keyboard and/or mouse.<br>The first step is to configure our gamepad. Hit <code>START</code> to open the main menu.<br>
  <img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/recalbox02.jpg" alt="Main menu" title="Main menu"></p>
<p>Go to <strong>Controller settings</strong>, and then choose <strong>Configure a controller</strong> (with my wired Xbox controller, <code>A</code> was used to confirm, while <code>B</code> was used to cancel or go back).<br><img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/recalbox07.jpg" alt="Controller settings (You should click on the first option, not the one I had selected )" title="Controller settings (You should click on the first option, not the one I had selected )"><br><img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/recalbox08.jpg" alt="Configuring a controller" title="Configuring a controller"></p>
<p>Simply follow the on-screen instructions, and press each matching buttons. If the button is recognized, the configuration wizard will move to the next row.<br><img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/recalbox09.jpg" alt="Configuring the buttons" title="Configuring the buttons"></p>
<p>Once this is done, you should be able to change the <strong>INPUT P1</strong> from the Controller settings to your custom configuration <em>(screenshot “Controller settings”)</em></p>
<h2 id="Graphics">
  <a href="#Graphics" class="headerlink" title="Graphics"></a>Graphics</h2>
<p>Go back to the main menu and choose <strong>Game Settings</strong>. Here is my configuration, but feel free to change it to match your liking. You can even enable filters to change your brand new widescreen LED TV to an old CRT with scanlines.<br>
  <img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/recalbox06.jpg" alt="Game Settings" title="Game Settings"></p>
<h2 id="Sound">
  <a href="#Sound" class="headerlink" title="Sound"></a>Sound</h2>
<p>If you want, you go to <strong>Sound settings</strong> an disable the music from playing in the main menu.</p>
<h2 id="UI">
  <a href="#UI" class="headerlink" title="UI"></a>UI</h2>
<p>In <strong>UI Settings</strong>, you can tweak the menus a bit. Here is my configuration <em>(I don’t think I changed anything)</em>.<br><img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/recalbox10.jpg" alt="Configuring the UI" title="Configuring the UI"></p>
<h2 id="Network">
  <a href="#Network" class="headerlink" title="Network"></a>Network</h2>
<p>This is important if you want your Raspberry to connect to your network. <em>(This will allow you to update RecalBox from the interface, but also send new games from your computer to the Raspberry, or edit configuration files directly)</em>.<br>With a
  wired connection, everything should work fine, but with WiFi, you’ll have to type the proper SSID and password from your router.<br><img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/recalbox11.jpg" alt="Configuring WIFI" title="Configuring WIFI"><br>RecalBox
  should automatically connect once the proper values have been entered.</p>
<h1 id="Copying-and-games">
  <a href="#Copying-and-games" class="headerlink" title="Copying and games"></a>Copying and games</h1>
<p>If you didn’t connect your Raspberry to your network, you’ll have to remove the SD card each time to drop the new games in the proper folder. But if everything worked fine, you can simply connect to your Raspberry by its IP <em>(you should find the IP in your router administration, where all connected devices are listed)</em>.<br>On
  Ubuntu, you can also simply type in a terminal<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">nmap -sn 192.168.1.0/24</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>The Raspberry PI should be listed <em>(but also all your computers, TVs, smartphones, etc.)</em>. If you are not sure, you can test all the entries. In my case, the IP is <code>192.168.1.18</code>.</p>
<p>You can now access the Raspberry in your web browser, by opening <a href="http://192.168.1.18" target="_blank" rel="external">http://192.168.1.18</a> (<em>use your IP, of course)</em><br><img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/recalbox-web.png" alt="The recalbox web interface" title="The recalbox web interface"><br>If you open the “<strong>Manage Rom files for emulated systems</strong>“ section, then pick a console, you should be able to upload games directly.<br><img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/recalbox-web2.png" alt="Uploading Games" title="Uploading Games"></p>
<h2 id="But-where-can-I-find-games">
  <a href="#But-where-can-I-find-games" class="headerlink" title="But where can I find games?"></a>But where can I find games?</h2>
<p>Well, as you may have imagined, these games are mostly illegal copies, so I won’t give you any link from this blog <em>(in theory, you can legally own any of these copies if you own the original game)</em>. <strong>But</strong>, it’s very easy to find
  them, if you know what you are looking for. Games running on emulators are stored as “<strong>Roms</strong>“. Any Google search of this word and the proper console next to it should be more than enough. Note that while I can’t give you direct links,
  I can also point you in the proper direction. Simply search for <em>“Emuparadise”</em> or <em>“RomStation”</em> (fr).</p>
<h2 id="Alternative-to-the-web-browser">
  <a href="#Alternative-to-the-web-browser" class="headerlink" title="Alternative to the web browser"></a>Alternative to the web browser</h2>
<p>On <strong>Windows</strong>, you can use <a href="https://winscp.net/eng/index.php" target="_blank" rel="external">WinSCP</a> to connect to Recalbox. Simply type the IP, choose <code>root</code> as the login/username, and <code>recalboxroot</code> as the password <em>(this is the default password for RecalBox)</em>.<br>You
  can now open the <code>recalbox/share/roms</code> folder and open the directory matching the system you want to use.</p>
<p>On <strong>Ubuntu</strong>, simply open the File Explorer, press <code>CTRL + L</code> to edit the address, and type in <code>ssh://192.168.1.18</code> <em>(use your own IP)</em>. You’ll be prompted for the login and password, use the same as above.<br>
  <img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/recalbox-ssh.png" alt="Browsing the game directories" title="Browsing the game directories"></p>
<p>Once the files are copied to the proper folder <em>(I won’t detail which formats are supported, but let’s say that nearly ALL formats are supported, unless you find something very exotic)</em>, you can go back to your Raspberry, open the Main Menu, Go
  to “Game settings”, and choose <strong>Update Games List</strong> at the very bottom of the list <em>(or you can also restart the Raspberry)</em>.</p>
<p>Then, pick any of the system, and you should see all your games <em>(see below for the game thumbnails)</em>.<br><img src="/2016/12/19/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-2/recalbox12.jpg" alt="SNES Emulator" title="SNES Emulator"></p>
<h1 id="Scraping-games">
  <a href="#Scraping-games" class="headerlink" title="Scraping games"></a>Scraping games</h1>
<p>If you want to see the thumbnails and details, you’ll have to <strong>Scrape</strong> the games. This means RecalBox will query a game database to fetch informations and display them in the interface. From the Main Menu, go to <strong>Scraper</strong>,
  ensure you are scraping from <strong>“THEGAMESDB”</strong>, and choose <strong>Scrape Now</strong>.<br>Check that all your systems are selected, and start the scraping. This may take some time, and some results may be inaccurate, requiring you to manually
  search for the games <em>(so you’ll need your keyboard)</em>.</p>
<h1 id="Achievements">
  <a href="#Achievements" class="headerlink" title="Achievements"></a>Achievements</h1>
<p>Recalbox also supports retro achievements from <a href="http://retroachievements.org/" target="_blank" rel="external">http://retroachievements.org/</a>. You can link your account from the options. I didn’t test it, but it will enable achievements on supported games, to keep track of
  your progression.</p>
<h1 id="Final-notes">
  <a href="#Final-notes" class="headerlink" title="Final notes"></a>Final notes</h1>
<p>If you want to turn off the Raspberry Pi, it’s very important to first go to the main Menu, ans select <strong>“Quit”</strong>, then <strong>“Shutdown System”</strong>. Once your screen goes black (or your TV switches to another input), you can safely
  disconnect the power supply from the Raspberry.</p>
<p>This concludes the Retrogaming tutorial. I hope you will have as much fun as I had by playing old games I used to play as a kid.<br>I will also explain to you, in another tutorial, how you can convert your Raspberry PI as a very powerful media center,
  using <strong>Kodi</strong>. You can even keep RecalBox installed if you don’t want to switch to another SDCard.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome back to this second part of the retro-gaming tutorial. Now that we have a working Raspberry, let’s install &lt;a href=&quot;https://www.recalbox.com/&quot;&gt;RecalBox&lt;/a&gt;. Recalbox &lt;em&gt;(or &lt;strong&gt;RecalBoxOS&lt;/strong&gt; should I say)&lt;/em&gt; is a free, open source
  operating system designed to work on Raspberry machines (and equivalent). Basically, it’s a bundle of emulators to play almost any old games, with a very user friendly interface on top of it, designed to be used on a TV.&lt;/p&gt;
    
    </summary>
    
      <category term="Gaming" scheme="http://kynesilverhide.github.io/categories/Gaming/"/>
    
      <category term="Raspberry Pi" scheme="http://kynesilverhide.github.io/categories/Gaming/Raspberry-Pi/"/>
    
    
      <category term="Raspberry" scheme="http://kynesilverhide.github.io/tags/Raspberry/"/>
    
      <category term="recalbox" scheme="http://kynesilverhide.github.io/tags/recalbox/"/>
    
      <category term="retrogaming" scheme="http://kynesilverhide.github.io/tags/retrogaming/"/>
    
      <category term="pi" scheme="http://kynesilverhide.github.io/tags/pi/"/>
    
      <category term="gaming" scheme="http://kynesilverhide.github.io/tags/gaming/"/>
    
  </entry>
  
  <entry>
    <title>A cheap retro-gaming solution : the Raspberry PI (Part 1)</title>
    <link href="http://kynesilverhide.github.io/2016/12/14/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-1/"/>
    <id>http://kynesilverhide.github.io/2016/12/14/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-1/</id>
    <published>2016-12-14T18:51:07.000Z</published>
    <updated>2017-03-12T12:57:29.982Z</updated>
    
    <content type="html"><![CDATA[<p>You may already know that Nintendo recently released the <a href="https://www.nintendo.co.uk/Misc-/Nintendo-Classic-Mini-Nintendo-Entertainment-System/Nintendo-Classic-Mini-Nintendo-Entertainment-System-1124287.html" target="_blank" rel="external">Nintendo Classic Mini</a>, a smaller
  re-edition of the original NES, but with a limited set of pre-installed games.</p>
<blockquote>
  <p>The Nintendo Classic Mini: Nintendo Entertainment System is a miniaturised version of the groundbreaking NES, originally released in Europe in 1986.<br>Just plug the Nintendo Classic Mini: Nintendo Entertainment System into your TV, pick up that grey
    controller, and rediscover the joy of NES games – in high definition at 60 Hz!</p>
</blockquote>
<p>Now, what if I told you that there are other reliable, <em>(cheaper?)</em>, easy to setup, alternatives? Yes, that’s right, and it’s called the <a href="https://www.raspberrypi.org/" target="_blank" rel="external">Raspberry Pi</a>. But instead of letting you play some <strong>NES</strong>  games, this will actually allow you to play any NES, Super NES, Gameboy, GBA, NeoGeo, .. and even Playstation games. And this will only cost you around <strong>70$</strong> (unfortunately, it will also cost <strong>70€</strong> if you are from Europe
  like me, so it’s a bit more expensive).<br>You will even be able to use the Raspberry Pi as a media center, if you are tired of playing games.</p>
<p>As you have probably seen, this tutorial will also be split into multiple parts. The first one will teach you a bit more about the raspberry and how you can set it up. The second part will teach you how to install the proper softwares to dive into the
  retro-gaming madness.<br>
  <a id="more"></a>
</p>
<h1 id="Introduction">
  <a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1>
<p>So, before starting any further, I want to assure you that you don’t need <em>any</em> special knowledge for this tutorial. While it may look a bit scary, the Raspberry Pi is just a small computer. It actually looks like this (with no case) :<br>
  <img src="/2016/12/14/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-1/raspberrypi.jpg" alt="The raspberry Pi with no case" title="The raspberry Pi with no case"></p>
<p>For this tutorial, I will recommend the last edition of the Raspberry Pi, called the <strong>Pi 3 Model B</strong>.<br>Here are the specifications :</p>
<ul>
  <li>A 1.2GHz 64-bit quad-core ARMv8 CPU</li>
  <li>802.11n Wireless LAN</li>
  <li>Bluetooth 4.1</li>
  <li>1GB RAM</li>
  <li>4 USB ports</li>
  <li>Full HDMI port</li>
  <li>Ethernet port</li>
  <li>Combined 3.5mm audio jack and composite video</li>
  <li>Micro SD card slot</li>
</ul>
<p>If you own a <strong>Raspberry Pi 2 Model B</strong>, this tutorial still works but the Model 3 has built-in WiFi, and is a bit more powerful.</p>
<h1 id="What-do-I-need">
  <a href="#What-do-I-need" class="headerlink" title="What do I need?"></a>What do I need?</h1>
<p>Of course, you’ll need a Raspberry Pi. But you’ll also need some other stuff :</p>
<ul>
  <li>An <strong>HDMI</strong> cable to connect your Raspberry Pi to your TV</li>
  <li>A <strong>power plug</strong>, because it doesn’t run on awesomeness alone</li>
  <li>A <strong>Micro SD Card</strong> (8Gb or more)</li>
  <li>An <strong>USB Gamepad</strong> (wireless gamepads may not work)</li>
  <li>(optional) a Raspberry Pi <strong>case</strong></li>
  <li>(optional) An <strong>USB Keyboard</strong> (just once, to setup the WiFi)</li>
  <li>(optional) An <strong>USB mouse</strong> (the gamepad should be enough in all situations)</li>
  <li>(optional) An ethernet cable (if you don’t have WiFi, or don’t want to use it)</li>
</ul>
<p>Here is a schema that will show you how the Raspberry will be connected<br><img src="/2016/12/14/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-1/raspb-schema01.png" alt="Raspberry and connections" title="Raspberry and connections"></p>
<h1 id="Where-can-I-get-this">
  <a href="#Where-can-I-get-this" class="headerlink" title="Where can I get this?"></a>Where can I get this?</h1>
<p>You can buy these one by one, or just buy a pack from Amazon. This will ensure you buy the proper power plug and case format.</p>
<ul>
  <li>Amazon.fr : <a href="https://www.amazon.fr/Vilros-Raspberry-Pi-Complete-Starter/dp/B01DC6MKAQ/ref=sr_1_2?ie=UTF8&amp;qid=1481889791&amp;sr=8-2&amp;keywords=raspberry+pi+3" target="_blank" rel="external">https://www.amazon.fr/Vilros-Raspberry-Pi-Complete-Starter/dp/B01DC6MKAQ/ref=sr_1_2?ie=UTF8&amp;qid=1481889791&amp;sr=8-2&amp;keywords=raspberry+pi+3</a></li>
  <li>Amazon.uk : <a href="https://www.amazon.co.uk/Vilros-Raspberry-Pi-Complete-Starter/dp/B01D0BKLZY/ref=sr_1_7?ie=UTF8&amp;qid=1481889825&amp;sr=8-7&amp;keywords=raspberry+pi+3" target="_blank" rel="external">https://www.amazon.co.uk/Vilros-Raspberry-Pi-Complete-Starter/dp/B01D0BKLZY/ref=sr_1_7?ie=UTF8&amp;qid=1481889825&amp;sr=8-7&amp;keywords=raspberry+pi+3</a></li>
  <li>Amazon.com : <a href="https://www.amazon.com/Vilros-Raspberry-Media-Center-Kit/dp/B01CYX4HRM/ref=sr_1_1?s=pc&amp;ie=UTF8&amp;qid=1481889863&amp;sr=1-1-spons&amp;keywords=raspberry+pi&amp;psc=1" target="_blank" rel="external">https://www.amazon.com/Vilros-Raspberry-Media-Center-Kit/dp/B01CYX4HRM/ref=sr_1_1?s=pc&amp;ie=UTF8&amp;qid=1481889863&amp;sr=1-1-spons&amp;keywords=raspberry+pi&amp;psc=1</a></li>
</ul>
<p>There are a lot of other packs and websites, but these few should help you find exactly what you need.</p>
<h1 id="But-I-need-to-build-it">
  <a href="#But-I-need-to-build-it" class="headerlink" title="But.. I need to build it?"></a>But.. I need to build it?</h1>
<p>Not really. Installing the Raspberry Pi only requires you to plug the cables. I recommend to use a case <em>(the transparent one from the pack for example)</em> to protect the components <em>(even from dust)</em>. Some packs will pack a pre-installed
  Micro SD Card, but we will format it anyway in the next part. So feel free to use it for now, or wait a bit more.</p>
<ul>
  <li>The first step is to put the Raspberry into the case. I also recommend to screw it to the lower part.</li>
  <li>Then, if you have some, you can put the small heatsinks on the top chips. It won’t do much, but it was probably in the pack, so why not. (You don’t need thermal paste)</li>
  <li>Close the case, and put the SD card in the bottom slot (depending on the case you may want to do it before for easier access)</li>
  <li>Plug the HDMI Cable to your TV or monitor <em>(If you are not using HDMI, you can also plug in your analogue TV or display, but you’ll need to use the <strong>audio jack</strong> for sound)</em></li>
  <li>Plug you USB Gamepad to any of the <strong>USB</strong> slots</li>
  <li>Plug the power supply. The Raspberry Pi will starts automatically <em>(there are no ON/OFF buttons, so you’ll need to unplug it to shut it down. You can also use some kind of multi sockets with an ON/OFF button on it)</em></li>
  <li>If needed, plug an USB keyboard into any of the available USB slots.</li>
  <li>If you don’t want to <em>(or simply can’t)</em> use WiFi, plug the ethernet cable to your router <em>(probably next to where your computer is plugged)</em>. If this is too far, you can <a href="https://www.amazon.com/dp/B00A128S24/ref=twister_B00PTUGAL4?_encoding=UTF8&amp;psc=1" target="_blank" rel="external">buy a gigabit switch</a>    and one more ethernet cable <em>(I had to do the same, not for the Raspberry, but for my Android TV, because my computer is at one end of a room, my TV on the opposite side, and the router is simply on another floor)</em>.<br>Simply plug the switch
    to the power supply, and run a cable from your modem/router to your switch. Then, plug two cables, one from the switch to your computer, and the second cable from the switch to your Raspberry pi. Use straight <em>“cat6”</em> cables <em>(well, it seems that modern switches and router can use both straight and crossover cable)</em>,
    or <em>“cat5”</em> for longer cables.<img src="/2016/12/14/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-1/raspb-schema02.png" alt="Raspberry network" title="Raspberry network"> You can find them on <a href="https://www.amazon.com/AmazonBasics-RJ45-Cat-6-Ethernet-Patch-Cable-5-Feet-1-5-Meters/dp/B00N2VILDM/ref=sr_1_5?s=pc&amp;ie=UTF8&amp;qid=1481893629&amp;sr=1-5&amp;keywords=rj45" target="_blank" rel="external">Amazon.com (RJ45)</a>,
    simply pick the proper cable length. <em>(Amazon “basics” cables should be available on every other Amazon websites)</em>.</li>
</ul>
<h1 id="What’s-next">
  <a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h1>
<p>Next, I will show you how to install <a href="https://www.recalbox.com/" target="_blank" rel="external">RecalBox</a> onto your SD Card, and configure it to play some good old games.<br>Here are some screenshots from Recalbox :</p>
<div class="justified-gallery"><br><img src="https://www.recalbox.com/assets/images/medias/emulationstation2fr-4-1024x575.jpg" alt="Recalbox"><br><img src="/2016/12/14/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-1/recalbox01.jpg" alt="Recalbox" title="Recalbox"><br><img src="/2016/12/14/A-cheap-retro-gaming-solution-the-Raspberry-PI-Part-1/recalbox02.png" alt="Recalbox" title="Recalbox"><br></div>

<p>Don’t worry, the installation is fully automated. The only steps you’ll have to do yourself are</p>
<ul>
  <li>copying Recalbox on the SD Card (you will need a card reader, but you’ll only need it once, so you should be able to borrow one)</li>
  <li>configuring your gamepad(s)<br>We will cover all the details in the next post.</li>
</ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;You may already know that Nintendo recently released the &lt;a href=&quot;https://www.nintendo.co.uk/Misc-/Nintendo-Classic-Mini-Nintendo-Entertainment-System/Nintendo-Classic-Mini-Nintendo-Entertainment-System-1124287.html&quot;&gt;Nintendo Classic Mini&lt;/a&gt;, a smaller
  re-edition of the original NES, but with a limited set of pre-installed games.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;The Nintendo Classic Mini: Nintendo Entertainment System is a miniaturised version of the groundbreaking NES, originally released in Europe in 1986.&lt;br&gt;Just plug the Nintendo Classic Mini: Nintendo Entertainment System into your TV, pick up that grey
    controller, and rediscover the joy of NES games – in high definition at 60 Hz!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, what if I told you that there are other reliable, &lt;em&gt;(cheaper?)&lt;/em&gt;, easy to setup, alternatives? Yes, that’s right, and it’s called the &lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt;. But instead of letting you play some &lt;strong&gt;NES&lt;/strong&gt;  games, this will actually allow you to play any NES, Super NES, Gameboy, GBA, NeoGeo, .. and even Playstation games. And this will only cost you around &lt;strong&gt;70$&lt;/strong&gt; (unfortunately, it will also cost &lt;strong&gt;70€&lt;/strong&gt; if you are from Europe
  like me, so it’s a bit more expensive).&lt;br&gt;You will even be able to use the Raspberry Pi as a media center, if you are tired of playing games.&lt;/p&gt;
&lt;p&gt;As you have probably seen, this tutorial will also be split into multiple parts. The first one will teach you a bit more about the raspberry and how you can set it up. The second part will teach you how to install the proper softwares to dive into the
  retro-gaming madness.&lt;br&gt;
    
    </summary>
    
      <category term="Gaming" scheme="http://kynesilverhide.github.io/categories/Gaming/"/>
    
      <category term="Raspberry Pi" scheme="http://kynesilverhide.github.io/categories/Gaming/Raspberry-Pi/"/>
    
    
      <category term="Raspberry" scheme="http://kynesilverhide.github.io/tags/Raspberry/"/>
    
      <category term="recalbox" scheme="http://kynesilverhide.github.io/tags/recalbox/"/>
    
      <category term="retrogaming" scheme="http://kynesilverhide.github.io/tags/retrogaming/"/>
    
      <category term="pi" scheme="http://kynesilverhide.github.io/tags/pi/"/>
    
      <category term="gaming" scheme="http://kynesilverhide.github.io/tags/gaming/"/>
    
  </entry>
  
  <entry>
    <title>Creating a material design wallpaper for your smartphone with GIMP</title>
    <link href="http://kynesilverhide.github.io/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/"/>
    <id>http://kynesilverhide.github.io/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/</id>
    <published>2016-12-10T17:30:55.000Z</published>
    <updated>2016-12-11T20:29:40.759Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://material.google.com/" target="_blank" rel="external">Material Design</a> is a set of rules defined by Google to build a graphical interface. It was first introduce in June 25, 2014, at the <a href="https://en.wikipedia.org/wiki/Google_I/O" target="_blank" rel="external">Google I/O</a> conference,
  and is used since <a href="https://www.android.com/" target="_blank" rel="external">Android</a> 5.0.</p>
<p>The goal of Material Design was to build a unified interface and experience across platforms and device sizes. It was built upon a list of principles that I won’t detail here (because that’s not the point of this post), but I can a least give you a summary
  :</p>
<ul>
  <li><strong>Material is the metaphor</strong> : each element exists in space, and follow the rules of physics. The background of your application is one giant big sheet of paper, with components lying on top of each other that can rearranged.</li>
  <li><strong>Bold, graphic, intentional</strong> : typography, grids, space, scale and colors create a hierarchy of elements with meaning, and focus</li>
  <li><strong>Motion provides meaning</strong> : motions must be used to focus attention on elements, without breaking the continuity. Transitions are efficient, coherent, and feedback is subtle, yet clear.</li>
</ul>
<p>Using these guidelines, Material Design applications tend to be somehow minimalistic. This is a good opportunity for us to build a wallpaper, as we won’t need much knowledge of the advanced features of <strong>Gimp</strong>.</p>
<p>So let’s dive right into it !</p>
<a id="more"></a>
<p>But what does Material Design wallpapers looks like? Well, you’ve seen one as the banner of this post, and if you are using an Android device, you’ve probably seen some too.<br>I’m not a very advanced Gimp user, nor am I very talented with design or artistic
  creations. But anyway, this is my very first wallpaper I made for this blog.<br><img src="material-bg01.png#PNG400" alt=""></p>
<p>The goal is of course to use it on your smartphone, not as a desktop wallpaper.<br>Here are some other samples from the web</p>
<div class="justified-gallery"><br><img src="http://www.topofandroid.com/wp-content/uploads/2015/05/Android-L-Material-Design-Wallpapers-5.png" alt=""><br><img src="http://www.topofandroid.com/wp-content/uploads/2015/05/Android-L-Material-Design-Wallpapers-4.png" alt=""><br><img src="http://www.topofandroid.com/wp-content/uploads/2015/05/Android-L-Material-Design-Wallpapers-3.png" alt=""><br></div>

<p><strong>I do not own any of these pictures</strong>, I just found them on <a href="http://www.topofandroid.com/" target="_blank" rel="external">http://www.topofandroid.com/</a></p>
<p>Let’s now learn how we can achieve something similar.</p>
<h1 id="Starting-with-GIMP">
  <a href="#Starting-with-GIMP" class="headerlink" title="Starting with GIMP"></a>Starting with GIMP</h1>
<p>On Ubuntu, GIMP should be installed by default, but if that’s not the case, let’s do it now :<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">sudo apt-get install gimp</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>On Windows and OSX, you can download GIMP here : <a href="https://www.gimp.org/downloads/" target="_blank" rel="external">https://www.gimp.org/downloads/</a></p>
<p>Once started, the very first configuration you should do is switch to the “Single Window” mode (at least on Ubuntu, otherwise GIMP will use separate windows for all elements, and that’s definitively not user friendly at all).<br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-setup01.PNG" alt="Switching to single window" title="Switching to single window"></p>
<p>The next step will be to rearrange the menus a bit. You can drag and drop any tabs from a menu to move it somewhere else. This is the layout I’m using right now :<br></p>
<ul>
  <li>On the top left, all the tools are listed. This is similar to Photoshop (even if the tools are different)</li>
  <li>On the bottom left, the selected tool options are listed</li>
  <li>On the top right, I kept the default layout, but I decided to move the “Layers” tab in the bottom right corner.</li>
</ul>
<h1 id="Installing-the-Material-Palette">
  <a href="#Installing-the-Material-Palette" class="headerlink" title="Installing the Material Palette"></a>Installing the Material Palette</h1>
<p>A palette is simply a predefined set of colors. In this case, someone was kind enough to create one with all the recommended colors when working with Material Design. Simply head to <a href="https://github.com/KiSSFLOW/gimp-material-design-color-palette" target="_blank" rel="external">https://github.com/KiSSFLOW/gimp-material-design-color-palette</a>  and download <code>Material-Design.gpl</code> somewhere on your computer.<br>Then in Gimp :</p>
<ul>
  <li>Go to <em>Windows &gt; Dockable Dialogs &gt; Palettes</em>.</li>
  <li>Once opened, click on configure this tab on the top right corner of the new window, and select <em>Palettes Menu &gt; Import Palette</em></li>
  <li>Select the option “Palette file” and browse to the downloaded file</li>
  <li>The palette should now be listed in the window. Double click on it to open the list of colors
  </li>
</ul>
<h1 id="Creating-a-new-file">
  <a href="#Creating-a-new-file" class="headerlink" title="Creating a new file"></a>Creating a new file</h1>
<p>To open a new file, simply go to <em>File &gt; New</em>. In this case, I decided to create a <code>1080</code> x <code>1920</code> (portrait) picture. There are a lot of mobile resolutions, so I decided to take something big enough to support all devices.
  This won’t matter much in our case, as our wallpaper is mostly made of resizable shapes.<br>Leave everything else to the default value (ensure <code>px</code> is the default unit) and click <em>Ok</em>.</p>
<p>Before actually working on the wallpaper, let’s think a bit about what we want. If you have read the Material Design article, you may have found some parts explaining the similitude with paper sheets. This is exactly what we want to do. Put abstract shapes
  on top of each others, add some shadows, and finally some texture to the shape.</p>
<h1 id="Creating-a-base">
  <a href="#Creating-a-base" class="headerlink" title="Creating a base"></a>Creating a base</h1>
<p>The very first step will be to choose a background color. In this case, I’m trying to create a green background, so I’ll pick the darkest green from the palette.<br>Use the <em>Bucket Fill Tool</em> (shortcut <code>SHIFT + B</code>) to fill the whole
  background.<br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-bucket.png" alt="Bucket tool" title="Bucket tool"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial01.png" alt="Painting the background in dark green" title="Painting the background in dark green"></p>
<p>Now, one <strong>very important step</strong>. Each time we want to add a new shape, we first need to create a new layer. Just think of sheet of papers. Each sheet is a new layer. So let’s create a new layer (you can name it if you want, it will be easier
  to keep all layers organized if they have a proper name)<br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-newlayer.png" alt="Adding a layer" title="Adding a layer"></p>
<p>Next we will add our first shape on top. So let’s start with the <em>Rectangle Tool</em> (shortcut : <code>R</code>)<br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-rectangle.png" alt="Rectangle tool" title="Rectangle tool"><br>Draw
  any shape you want, then, pick a color from the palette, and click in your shape using the <em>Bucket Fill Tool</em> again. In this case, I choose a lighter green.<br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial02.png" alt="Adding another shape" title="Adding another shape"></p>
<p>Now, using the <em>Scale</em> (<code>SHIFT + T</code>) And <em>Rotate</em> (<code>SHIFT + R</code>) tools <img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-scale-rotate.png" alt="Scale and Rotate tools" title="Scale and Rotate tools">,
  let’s rotate our shape by <code>45°</code> and scale it (if needed).<br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial03.png" alt="Scaling and Rotating the shape" title="Scaling and Rotating the shape"></p>
<p>Finally, you can move the shape using the <em>Move Tool</em> (<code>M</code>)<br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-move.png" alt="Move tool" title="Move tool"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial04.png" alt="Positioning the shape" title="Positioning the shape"></p>
<p>Click on the anchor to merge this floating selection with the previously created layer.<br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-floatinganchor.png" alt="Anchoring the floating layer" title="Anchoring the floating layer"></p>
<p>Now, let’s add some shadow to this first shape. <strong>Ensure the shape layer is selected</strong>. Go to <em>Filters &gt; Light and Shadow &gt; Drop Shadow</em>. Keep the default settings <strong>but deselect “Allow resizing”</strong> (offset X and
  Y = <code>4</code>, blur = <code>15</code>, color = <code>black</code>, opacity = <code>60</code>).<br>Once this is done, <em>Right Click</em> on the first layer (either your shape or the drop shadow), and select <em>merge down</em>. This will ensure
  both the shape and the shadows are one element (both will move together, etc.)<br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial05.png" alt="Our first shadow and shape" title="Our first shadow and shape"></p>
<p>Let’s repeat the same operation with two new shapes. Start with a new layer (each time), then reuse the sames tools as before : <em>Rectangle Tool</em>, <em>Scaling</em> and <em>Resizing</em> tools, <em>Moving Tool</em>, and then anchor the floating selection
  to the layer.<br>Then, apply the <em>Drop Shadow</em> (note that a shortcut will be added in the <em>Filters</em> menu, so you can reapply the previous effect with the same settings). Don’t forget to also <em>Merge Down</em> the shape and its shadow.<br>
  <img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial06.png" alt="Adding two other shapes to the wallpaper" title="Adding two other shapes to the wallpaper"></p>
<h1 id="Adding-complexity">
  <a href="#Adding-complexity" class="headerlink" title="Adding complexity"></a>Adding complexity</h1>
<p>To improve our wallpaper, let’s add more shapes and some new colors. Let’s pick the left shape layer, and duplicate it.<br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-duplicate.png" alt="Anchoring the floating layer" title="Anchoring the floating layer"></p>
<p>Using the <em>Bucket Fill Tool</em>, pick a lighter green, and click on your shape. Then, move it to the left.<br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial07.png" alt="Adding more complexity. Step 1" title="Adding more complexity. Step 1"></p>
<p>Repeat the operating and duplicate the shape, using a different shade of green each time. Try to add some contrast too.</p>
<div class="justified-gallery"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial08.png" alt="Adding more complexity. Step 2" title="Adding more complexity. Step 2"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial09.png" alt="Adding more complexity. Step 3" title="Adding more complexity. Step 3"><br></div><br><strong>If the shadow is too dark</strong>, because two layers are overlapping, simply use the <em>Eraser Tool*</em> (<code>SHIFT + E</code>), select the lower
layer that overlaps, and erase the shadow with the eraser.<br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-eraser.png" alt="Eraser Tool" title="Eraser Tool"><br><br># Adding more complexity…<br>By varying
the shapes and colors, you should really start to have something nice. Here are the steps I did. Feel free to copy them, or do something very different.<br>Randomness is also very important.<br>
<div class="justified-gallery"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial10.png" alt="Adding more elements. Step 1" title="Adding more elements. Step 1"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial11.png" alt="Adding more elements. Step 2" title="Adding more elements. Step 2"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial12.png" alt="Adding more elements. Step 3" title="Adding more elements. Step 3"><br></div>

<p>I wanted to add some triangles too. So, using the <em>Free Select Tool</em>, I created a triangle (click once for each vertex), and filled it with another shade of green. Then I duplicated the shape (and its shadow), and picked once again another green.<br>
  <img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-lasso.png" alt="Free Select Tool" title="Free Select Tool"></p>
<div class="justified-gallery"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial13.png" alt="Adding a triangle" title="Adding a triangle"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial14.png" alt="Adding another triangle" title="Adding another triangle"><br></div>

<p>I didn’t really liked the green I choose as contrast, so I went for yellow instead by simply selecting the <em>Bucket Fill Tool</em>, then each layer, and clicking on the surface to repaint.</p>
<div class="justified-gallery"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial15.png" alt="Switching to yellow" title="Switching to yellow"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial16.png" alt="Adding more shapes" title="Adding more shapes"><br></div>

<h1 id="Final-adjustments">
  <a href="#Final-adjustments" class="headerlink" title="Final adjustments"></a>Final adjustments</h1>
<p>To experiment a bit more, I decided to add a gray circle to the wallpaper. First, let’s create another new layer. Then, using the <em>Ellipse Select Tool</em>, draw a perfect circle by holding the <code>SHIFT</code> key to keep the 1:1 ratio and fill
  it with gray.<br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-ellipse.png" alt="Ellipse Select Tool" title="Ellipse Select Tool"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial17.png" alt="Adding a circle" title="Adding a circle"></p>
<p>Just above the layers, adjust the opacity to <code>50</code>, and switch the (blending) mode to <code>Hard Light</code><br>Create once again a new layer, a new circle, but this time, fill it with white.<br>Set the opacity to <code>25</code> and the mode
  to <code>Overlay</code><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial18.png" alt="Adding another circle" title="Adding another circle"></p>
<p>I like what we have so far, but I want to give it a more “physical” feel, by adding some texture to the shapes (to mimic real paper).<br>To do that, select a layer and simply go to <em>Filters &gt; Noise &gt; RGB Noise</em> and use these settings<br>
  <img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial19.png" alt="Adding some texture" title="Adding some texture"><br>I reapplied the same operation (you can hit <code>CTRL + F</code> to reapply the last filter on the select layer) on all green shapes (not the yellow ones).<br>The change is very subtle though.<br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/gimp-tutorial20.png" alt="Adding more texture" title="Adding more texture"></p>
<p>Saving your creation is easy (<em>File &gt; Save As…</em>), but if you want to save it as a <code>.png</code> file, just go to <em>File &gt; Export As…</em> instead.<br>The final result can be seen here (feel free to use it !) : <a href="material-bg02.png">Download</a></p>
<h1 id="Tips-and-tricks">
  <a href="#Tips-and-tricks" class="headerlink" title="Tips and tricks"></a>Tips and tricks</h1>
<p>If you want to easily change all colors, follow these steps :</p>
<ul>
  <li>Hit <code>CTRL + A</code> to select the whole canvas</li>
  <li>Hit <code>CTRL + SHIFT + C</code> to copy all layers as one single merged layer</li>
  <li>Hit <code>CTRL + SHIFT + V</code> to copy into a new composition/tab</li>
</ul>
<p>Go to <em>Colors &gt; Colorize</em>, and play with the <code>Hue</code>. You can use another color for your lock screen, or simply lower the <code>Saturation</code></p>
<div class="justified-gallery"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/material-bg02.png" alt="Original wallpaper" title="Original wallpaper"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/material-bg03.png" alt="Variant 1" title="Variant 1"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/material-bg04.png" alt="Variant 2" title="Variant 2"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/material-bg05.png" alt="Variant 3" title="Variant 3"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/material-bg06.png" alt="Variant 4" title="Variant 4"><br></div>

<h1 id="Conclusion">
  <a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1>
<p>This was a big post, and I hope you were able to follow along. If not, don’t hesitate to ask questions in the comments below (you need a (Disqus)[<a href="https://disqus.com/" target="_blank" rel="external">https://disqus.com/</a>] account, but you can create one directly by using
  your <strong>Google</strong>, <strong>Twitter</strong> of <strong>Facebook</strong> account).<br>I also hope that you have learned a bit more how to use Gimp. Feel free to try the same things in any other software of your choice (Photoshop for example).
  You can also share your own creations if you want.<br><strong>Note</strong> : You can use the final wallpapers whenever and wherever you want.</p>
<div class="justified-gallery"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/smartphone01.png" alt="My smartphone" title="My smartphone"><br><img src="/2016/12/10/Creating-a-material-design-wallpaper-for-your-smartphone-with-GIMP/smartphone02.png" alt="Lock screen" title="Lock screen"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://material.google.com/&quot;&gt;Material Design&lt;/a&gt; is a set of rules defined by Google to build a graphical interface. It was first introduce in June 25, 2014, at the &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_I/O&quot;&gt;Google I/O&lt;/a&gt; conference,
  and is used since &lt;a href=&quot;https://www.android.com/&quot;&gt;Android&lt;/a&gt; 5.0.&lt;/p&gt;
&lt;p&gt;The goal of Material Design was to build a unified interface and experience across platforms and device sizes. It was built upon a list of principles that I won’t detail here (because that’s not the point of this post), but I can a least give you a summary
  :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Material is the metaphor&lt;/strong&gt; : each element exists in space, and follow the rules of physics. The background of your application is one giant big sheet of paper, with components lying on top of each other that can rearranged.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bold, graphic, intentional&lt;/strong&gt; : typography, grids, space, scale and colors create a hierarchy of elements with meaning, and focus&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Motion provides meaning&lt;/strong&gt; : motions must be used to focus attention on elements, without breaking the continuity. Transitions are efficient, coherent, and feedback is subtle, yet clear.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using these guidelines, Material Design applications tend to be somehow minimalistic. This is a good opportunity for us to build a wallpaper, as we won’t need much knowledge of the advanced features of &lt;strong&gt;Gimp&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;So let’s dive right into it !&lt;/p&gt;
    
    </summary>
    
      <category term="Design" scheme="http://kynesilverhide.github.io/categories/Design/"/>
    
      <category term="Gimp" scheme="http://kynesilverhide.github.io/categories/Design/Gimp/"/>
    
    
      <category term="gimp" scheme="http://kynesilverhide.github.io/tags/gimp/"/>
    
      <category term="material" scheme="http://kynesilverhide.github.io/tags/material/"/>
    
      <category term="design" scheme="http://kynesilverhide.github.io/tags/design/"/>
    
      <category term="tutorial" scheme="http://kynesilverhide.github.io/tags/tutorial/"/>
    
      <category term="wallpaper" scheme="http://kynesilverhide.github.io/tags/wallpaper/"/>
    
  </entry>
  
  <entry>
    <title>Recommended packages for Atom</title>
    <link href="http://kynesilverhide.github.io/2016/12/06/Recommended-packages-for-Atom/"/>
    <id>http://kynesilverhide.github.io/2016/12/06/Recommended-packages-for-Atom/</id>
    <published>2016-12-06T19:09:32.000Z</published>
    <updated>2016-12-08T19:21:42.722Z</updated>
    
    <content type="html"><![CDATA[<p>If you have read my <a href="/2016/12/03/Discovering-and-installing-Ubuntu-in-VirtualBox-P3/">previous article</a>, you may have chosen to give <strong>Atom</strong> a try.<br>The best way to describe what Atom is, is to quote its website (<a href="https://atom.io/" target="_blank" rel="external">https://atom.io/</a>):</p>
<blockquote>
  <p>Atom is a text editor that’s modern, approachable, yet hackable to the core—a tool you can customize to do anything but also use productively without ever touching a config file.</p>
</blockquote>
<p>Atom works. It’s simple, yet very powerful. It relies on community plugins to extend its base features. Ah, and it’s available on Windows, Mac and Linux <em>(meaning you don’t have to follow all three previous tutorials on Ubuntu to test it)</em>.</p>
<p>In this article, I’ll show you some of the best plugins (called <em>packages</em>) that you definitively should check out.<br>
  <a id="more"></a>
</p>
<p>If you are starting Atom for the first time, you’ll probably see this welcome screen.<br><img src="/2016/12/06/Recommended-packages-for-Atom/atom01.png" alt="Atom Welcome Screen" title="Atom Welcome Screen"></p>
<p>It will basically summarize the first steps you can take in Atom :</p>
<ul>
  <li><strong>Open a Project</strong> : This will open the project tree on the left, and set it as your workspace</li>
  <li><strong>Install a Package</strong> : This is the main topic we will discuss later on. Packages are extensions that can add features, shortcuts, etc. Even the core features of Atom are bundled as packages, making it very modular and hackable.</li>
  <li><strong>Choose a Theme</strong> : Themes will allow you to customize Atom, from the editor colors to the button skins. In the previous screenshots, I was using the default <em>One Dark</em> theme.</li>
  <li><strong>Customize the sytling</strong> : If you want very deep customization of the interface, you can even add your own CSS.</li>
  <li><strong>Hack on the Init Script</strong> : You can use it to change the behavior of Atom by editing the startup script</li>
  <li><strong>Add a Snipper</strong> : Create you own code snippets to generate code from a predefined prefix.</li>
  <li><strong>Learn Keyboard shortcuts</strong> : This should be self-explanatory. All IDE comes with lots of key-bindings, and learning them is often a good idea.</li>
</ul>
<h1 id="Themes">
  <a href="#Themes" class="headerlink" title="Themes"></a>Themes</h1>
<p>Themes can be install by opening the <strong>Edit &gt; Preferences</strong> Menu, and then going into the <strong>Install</strong> section. Don’t forget to click on <em>“Themes”</em> when searching by names.<br><img src="/2016/12/06/Recommended-packages-for-Atom/atomtheme01.png" alt="Installing new themes in Atom" title="Installing new themes in Atom"></p>
<h2 id="One-Light">
  <a href="#One-Light" class="headerlink" title="One-Light"></a>One-Light</h2>
<p>For those that don’t like dark themes, here is the default One-Light theme. I was a big fan of light themes when I started coding. Then I discovered IntelliJ and its <strong>Darkula Theme</strong>, and it was love at first sight. This is a <strong>major</strong>  improvement from <a href="https://eclipse.org/downloads/" target="_blank" rel="external">Eclipse</a>‘s dark themes <em>(they just don’t work… too much contrast maybe)</em><br><img src="/2016/12/06/Recommended-packages-for-Atom/atom03.png" alt="Atom One Light Theme" title="Atom One Light Theme"></p>
<h2 id="Atom-Material">
  <a href="#Atom-Material" class="headerlink" title="Atom-Material"></a>Atom-Material</h2>
<p>After some customization (no custom CSS, I only used the configuration screen installed with the theme), this is what I came up with using the “Atom-Material-UI” theme. If you are not familiar with <strong>Material Design</strong> (by Google), I recommend
  you to read this article : <a href="http://design.google.com/resources" target="_blank" rel="external">http://design.google.com/resources</a><br><img src="/2016/12/06/Recommended-packages-for-Atom/atom02.png" alt="Atom Material UI Theme" title="Atom Material UI Theme"></p>
<h1 id="Packages">
  <a href="#Packages" class="headerlink" title="Packages"></a>Packages</h1>
<p>Based on what you will mostly use Atom for, you may need very different packages. I’ll try to cover a bit of everything by showing you what packages I’ve installed. Installation is done similarly to Themes, by switching to <strong>Packages</strong> before
  searching.</p>
<h2 id="Markdown-Writer">
  <a href="#Markdown-Writer" class="headerlink" title="Markdown Writer"></a>Markdown Writer</h2>
<p>As I’m using Markdown syntax to write this blog, this package was one of my top priority. It allows to automatically insert elements, tables, etc by using the packages menu. Note that by default, Atom includes a markdown preview package that will show
  you a live preview of what you are typing.<br><img src="/2016/12/06/Recommended-packages-for-Atom/atom04.png" alt="Atom Markdown Writer" title="Atom Markdown Writer"></p>
<h2 id="Atom-Hexo">
  <a href="#Atom-Hexo" class="headerlink" title="Atom Hexo"></a>Atom Hexo</h2>
<p>Sometimes, I feel lazy and I don’t want to switch to the terminal. This package will allow me to trigger some of the Hexo commands within Atom. If you want more integration, you’ll find another alternative below.<br><img src="/2016/12/06/Recommended-packages-for-Atom/atom05.png" alt="Atom Hexo" title="Atom Hexo"></p>
<h2 id="File-Icons">
  <a href="#File-Icons" class="headerlink" title="File Icons"></a>File Icons</h2>
<p>File-icons gives more “life” to you project files by using improved and colored icons. Here is a comparison with and without the plugin.</p>
<div class="justified-gallery"><br><img src="/2016/12/06/Recommended-packages-for-Atom/atom06.png" alt="Atom File Icons enabled" title="Atom File Icons enabled"><br><img src="/2016/12/06/Recommended-packages-for-Atom/atom07.png" alt="Atom File Icons disabled" title="Atom File Icons disabled"><br></div>

<h2 id="Minimap">
  <a href="#Minimap" class="headerlink" title="Minimap"></a>Minimap</h2>
<p>I’m not personaly using it, but some people likes to have a small scrollable view of their code. That’s exactly what this package does.<br><img src="/2016/12/06/Recommended-packages-for-Atom/atom08.png" alt="Atom Minimap" title="Atom Minimap"></p>
<h2 id="Pigments">
  <a href="#Pigments" class="headerlink" title="Pigments"></a>Pigments</h2>
<p>Pigment is very useful for CSS developers. It will actually show the color behind each color codes. By default, It will look like the left picture.<br>But I like it a bit more subtle, so I’ve changed the configuration to use the <em>gutter</em> mode instead.</p>
<div class="justified-gallery"><br><img src="/2016/12/06/Recommended-packages-for-Atom/atom09.png" alt="Atom Pigments" title="Atom Pigments"><br><img src="/2016/12/06/Recommended-packages-for-Atom/atom10.png" alt="Atom Pigments" title="Atom Pigments"><br></div>

<h2 id="Terminal-plus">
  <a href="#Terminal-plus" class="headerlink" title="Terminal plus"></a>Terminal plus</h2>
<p>Terminal-Plus will embed your Ubuntu terminal inside Atom. This means you’ll have access to the same commands in your editor. Unfortunately, the last version is bugged, so you’ll need to follow these instructions once the package has been installed</p>
<ul>
  <li>First, we’ll need to edit <code>~/.atom/packages/terminal-plus/package.json</code></li>
  <li>Then, replace <code>&quot;pty.js&quot;: &quot;git+https://github.com/jeremyramin/pty.js.git#28f2667&quot;</code>With <code>&quot;pty.js&quot;: &quot;git+https://github.com/jeremyramin/pty.js.git&quot;</code></li>
  <li>Now, you just have to type in these commands :
    <figure class="highlight plain">
      <table>
        <tr>
          <td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td>
          <td class="code"><pre><div class="line">cd ~/.atom/packages/terminal-plus/</div><div class="line">npm install</div><div class="line">apm rebuild</div></pre></td>
        </tr>
      </table>
    </figure>
  </li>
</ul>
<p>Restart Atom, and it should work as below.<br><img src="/2016/12/06/Recommended-packages-for-Atom/atom11.png" alt="Atom Pigments" title="Atom Pigments"></p>
<p><strong>Note</strong> : the installation guide tells you to install <em>node-gyp</em> first (it’s a dependency). Simply open a terminal and type<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">npm install -g node-gyp</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>Complete instructions are available here : <a href="https://github.com/nodejs/node-gyp#installation" target="_blank" rel="external">https://github.com/nodejs/node-gyp#installation</a> <em>(I didn’t need to install the other dependencies though…)</em></p>
<h1 id="BONUS-Active-Power-Mode">
  <a href="#BONUS-Active-Power-Mode" class="headerlink" title="BONUS : Active Power Mode"></a>BONUS : Active Power Mode</h1>
<p>This very important packages will bring more satisfaction to every letters you type in your code. I recommend to have 3D acceleration for a more smooth experience.</p>
<p><img src="https://i.github-camo.com/b1d03b9b7a9d7dc9a32d1eab307b5378f8c59a7b/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f3638383431352f31313631353536352f31306631363435362d396336352d313165352d386166342d3236356630316663383361302e676966" alt=""><br><img src="https://i.github-camo.com/ca572e22e64a42c44f59e1ebb40d4a1e1b748761/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f31303539303739392f31383831373233372f38373663326438342d383332312d313165362d383332342d6631353430363034633062642e676966" alt=""></p>
<h1 id="Conclusion">
  <a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1>
<p>I hope that you liked this post, and that I gave you some motivation to test Atom.<br>For now, this is my favorite editor at home, for my personal projects <em>(at work, I’m using <em>IntelliJ Ultimate</em>, but I don’t have to pay it myself. At home,
  a free alternative is more than welcome)</em>.<br>We will probably meet again soon in the next post, where I will show you some tricks with <a href="https://www.gimp.org/" target="_blank" rel="external">Gimp</a> !</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you have read my &lt;a href=&quot;/2016/12/03/Discovering-and-installing-Ubuntu-in-VirtualBox-P3/&quot;&gt;previous article&lt;/a&gt;, you may have chosen to give &lt;strong&gt;Atom&lt;/strong&gt; a try.&lt;br&gt;The best way to describe what Atom is, is to quote its website (&lt;a href=&quot;https://atom.io/&quot;&gt;https://atom.io/&lt;/a&gt;):&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Atom is a text editor that’s modern, approachable, yet hackable to the core—a tool you can customize to do anything but also use productively without ever touching a config file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Atom works. It’s simple, yet very powerful. It relies on community plugins to extend its base features. Ah, and it’s available on Windows, Mac and Linux &lt;em&gt;(meaning you don’t have to follow all three previous tutorials on Ubuntu to test it)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In this article, I’ll show you some of the best plugins (called &lt;em&gt;packages&lt;/em&gt;) that you definitively should check out.&lt;br&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://kynesilverhide.github.io/categories/Programming/"/>
    
      <category term="Atom" scheme="http://kynesilverhide.github.io/categories/Programming/Atom/"/>
    
    
      <category term="atom" scheme="http://kynesilverhide.github.io/tags/atom/"/>
    
      <category term="packages" scheme="http://kynesilverhide.github.io/tags/packages/"/>
    
      <category term="development" scheme="http://kynesilverhide.github.io/tags/development/"/>
    
      <category term="code" scheme="http://kynesilverhide.github.io/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Discovering and installing Ubuntu in VirtualBox P3</title>
    <link href="http://kynesilverhide.github.io/2016/12/03/Discovering-and-installing-Ubuntu-in-VirtualBox-P3/"/>
    <id>http://kynesilverhide.github.io/2016/12/03/Discovering-and-installing-Ubuntu-in-VirtualBox-P3/</id>
    <published>2016-12-03T10:58:35.000Z</published>
    <updated>2016-12-08T17:56:06.427Z</updated>
    
    <content type="html"><![CDATA[<p>Here we are, at the third and last part of this guide. In this post, I’ll try to cover what programs you can use for most of your tasks, but also give you an introduction to the terminal.</p>
<p>Please keep in mind that we didn’t install Ubuntu to replace Windows : we are working in a virtual environment, meaning we can’t expected to play games (we even disabled 3D acceleration…). Focus will be done on development : web browsing, coding, files
  and pictures editing, etc.</p>
<p>Let’s dive right into it !<br>
  <a id="more"></a>
</p>
<h1 id="Applications">
  <a href="#Applications" class="headerlink" title="Applications"></a>Applications</h1>
<p>Applications on Linux systems are similar to Windows or OSX applications. But not all of them exists on Linux. I’ll split this section into themes, and show you alternatives to what you were used to.<br>Also, installing applications is very easy. Just
  start the <strong>Ubuntu software</strong> applications (from the left menu, or by using the global search), search for what you want, and click <em>Install</em>. You can also browse by categories if you don’t know the name of your application. Lastly,
  if you can’t find something, Google is still a valid option to find what you are looking for. Some applications are not available through the repositories, and are instead distributed as <code>.deb</code> files (Debian packages).</p>
<h2 id="Web-browsing">
  <a href="#Web-browsing" class="headerlink" title="Web browsing"></a>Web browsing</h2>
<p>Unless you are coming from OSX <em>(but in that case, you should probably stick to it, it may be the best operating system for developers… if you are willing to pay the price)</em>, you shouldn’t have problems to find what you want.</p>
<ul>
  <li><strong>Firefox</strong> : Firefox is the default web browser in Ubuntu. It’s very fast, powerful, you can install plugins to use even more features, and its debugging tools are very powerful.</li>
  <li><strong>Chromium</strong> : Chrome itself is not available on Ubuntu, but Chromium is. To quote their website :
    <blockquote>
      <p>The Chromium projects include Chromium and Chromium OS, the open-source projects behind the Google Chrome browser and Google Chrome OS.</p>
    </blockquote>
  </li>
</ul>
<p>If you were using any of these two on Windows, you can just sign in to keep your bookmarks and plugins synchronized. If you were using Internet Explorer before… you should really try any of these two alternatives. They are just better in every single
  aspects. Even on Windows.</p>
<h2 id="Text-Editor">
  <a href="#Text-Editor" class="headerlink" title="Text Editor"></a>Text Editor</h2>
<p>The basic text editor on Ubuntu is called <strong>Gedit</strong>. It’s similar to <strong>Notepad++</strong>, and support plugins to add more features. If you want something more advanced, I’ll give you some alternatives (that I’m using) in the Coding
  section.<br><img src="/2016/12/03/Discovering-and-installing-Ubuntu-in-VirtualBox-P3/gedit.png" alt="Gedit Text Editor" title="Gedit Text Editor"></p>
<p>If you want to show the world how awesome you are at using very complex tools, I suggest you to try <a href="http://www.vim.org/" target="_blank" rel="external">VIM</a> or <a href="https://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a>. But if, like me, you are not ashamed of using an IDE
  <em>(Integrated Development Environment)</em>, you should find what you are looking for in the next sections.</p>
<h2 id="Picture-editor">
  <a href="#Picture-editor" class="headerlink" title="Picture editor"></a>Picture editor</h2>
<p>Well, unfortunately, Photoshop is not available on Ubuntu. Instead, you have <strong>GIMP</strong>. While not as powerful, GIMP can do lots of things, and also supports plugins to have access to more features. I may do a quick tutorial on GIMP in the
  future, but I’m not an expert. You can find some basic and more advanced tutorials here : <a href="https://www.gimp.org/tutorials/" target="_blank" rel="external">https://www.gimp.org/tutorials/</a><br><img src="/2016/12/03/Discovering-and-installing-Ubuntu-in-VirtualBox-P3/gimp.png" alt="GIMP" title="GIMP"></p>
<h2 id="Music">
  <a href="#Music" class="headerlink" title="Music"></a>Music</h2>
<p>If you want to listen to music while coding (or not), you can use the default program called <strong>Rhythmbox</strong>. I, myself, prefer to use web players, such as <a href="https://play.google.com/music/" target="_blank" rel="external">Google Music</a>. If you are a <strong>Spotify</strong>  user, there is a version for Ubuntu (and also a web player on their website). To install it, you’ll need to type some commands in the terminal : <a href="https://www.spotify.com/be-nl/download/linux/" target="_blank" rel="external">https://www.spotify.com/be-nl/download/linux/</a>.
  Don’t worry if you don’t understand them yet.<br><img src="/2016/12/03/Discovering-and-installing-Ubuntu-in-VirtualBox-P3/rhythmbox.png" alt="Gedit Rhythmbox Music Player" title="Gedit Rhythmbox Music Player"></p>
<h2 id="Videos">
  <a href="#Videos" class="headerlink" title="Videos"></a>Videos</h2>
<p>While there is a default applications for videos, I suggest to use <strong>VLC</strong>, because it supports nearly all existing formats by default (you don’t need codecs).<br><img src="/2016/12/03/Discovering-and-installing-Ubuntu-in-VirtualBox-P3/vlc.png" alt="VLC Video Player" title="VLC Video Player"></p>
<h2 id="Code-IDE">
  <a href="#Code-IDE" class="headerlink" title="Code/IDE"></a>Code/IDE</h2>
<p>If you have done a bit of research, you should know that one of the best IDE for Java is <a href="https://www.jetbrains.com/idea/" target="_blank" rel="external">IntelliJ</a>. It can supports a lot of other languages (HTML, CSS and Javascripts are supported by default, but you’ll also
  get support for Kotlin, Groovy, Scala, Maven, Ant, Git, SVN, Mercurial, CVS, Typescript, Android development, and much more). It also works on Windows, OSX and Ubuntu. BUT, the Ultimate version is not cheap.<br>If you want to install it, you’ll have
  to go to their website and download the compressed archive : <a href="https://www.jetbrains.com/idea/download/#section=linux" target="_blank" rel="external">https://www.jetbrains.com/idea/download/#section=linux</a>. Unpack it somewhere on your computer (you can right click the downloaded
  file to extract), open a terminal, go to the extracted directory <em>(see last section)</em> and type<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">./idea.sh</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>A free, and very powerful alternative (that I’m using) is <a href="https://atom.io/" target="_blank" rel="external">Atom</a>, a text editor developed by the Github team. It comes with a lot of features, supports lots of plugins, themes, and high customization.<br><img src="/2016/12/03/Discovering-and-installing-Ubuntu-in-VirtualBox-P3/atom.png" alt="Atom Code Editor" title="Atom Code Editor"><br>I will probably do a dedicated post to show you some of the best packages you can use. For example, it can integrate the <em>Hexo</em> commands to generate and serve your blog files (see <a href="/2016/11/26/Hello-World/">my first post</a>)</p>
<h2 id="Other-applications">
  <a href="#Other-applications" class="headerlink" title="Other applications"></a>Other applications</h2>
<table>
  <thead>
    <tr>
      <th>Windows</th>
      <th>Ubuntu</th>
      <th>Comment</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Outlook</td>
      <td>Thunderbird</td>
      <td>But you should really consider creating a <a href="https://mail.google.com/mail/u/0/#inbox" target="_blank" rel="external">Gmail</a> address from Google</td>
    </tr>
    <tr>
      <td>Microsoft Office</td>
      <td>Libre Office</td>
      <td>This set of applications will maintain as much compatibility as possible, but they definitively lack some features</td>
    </tr>
    <tr>
      <td>FileZilla, FTP Clients</td>
      <td>FileZilla</td>
      <td>But the default file explorer can also connects to FTP servers if you type the URL in the adress bar</td>
    </tr>
    <tr>
      <td>Putty</td>
      <td>Terminal</td>
      <td>Just type <code>ssh username@host.com</code></td>
    </tr>
    <tr>
      <td>WinSCP</td>
      <td>File Explorer (Nautilus)</td>
      <td>Same as the FTP client</td>
    </tr>
    <tr>
      <td>Torrent clients</td>
      <td>Transmission</td>
      <td>Very basic, but it works</td>
    </tr>
    <tr>
      <td>Skype</td>
      <td>Skype</td>
      <td><a href="https://www.skype.com/en/download-skype/skype-for-linux/" target="_blank" rel="external">https://www.skype.com/en/download-skype/skype-for-linux/</a></td>
    </tr>
  </tbody>
</table>
<p>You can find even more alternatives here : <a href="http://askubuntu.com/questions/389228/what-default-windows-software-alternatives-does-ubuntu-have" target="_blank" rel="external">http://askubuntu.com/questions/389228/what-default-windows-software-alternatives-does-ubuntu-have</a></p>
<h1 id="Accessing-files-from-the-host-Windows">
  <a href="#Accessing-files-from-the-host-Windows" class="headerlink" title="Accessing files from the host (Windows)"></a>Accessing files from the host (Windows)</h1>
<p>Ok, so let’s get back to our virtual machine. As I said, Ubuntu is running inside a “box”. You can’t really access anything outside this box, unless you asks VirtualBox for some help.<br>To do this, simply open the VirtualBox menu, and open the Shared
  Folders configuration<br><img src="/2016/12/03/Discovering-and-installing-Ubuntu-in-VirtualBox-P3/shared-folders01.PNG" alt="Shared Folders Configuration 01" title="Shared Folders Configuration 01"></p>
<p>Simply add a new shared folder, browse to the location, and don’t forget to check “automount” and “make permanent”<br><img src="/2016/12/03/Discovering-and-installing-Ubuntu-in-VirtualBox-P3/shared-folders02.PNG" alt="Shared Folders Configuration 02" title="Shared Folders Configuration 02"></p>
<p>If you open the file explorer in Ubuntu, you should now see a new entry on the left<br><img src="/2016/12/03/Discovering-and-installing-Ubuntu-in-VirtualBox-P3/shared-folders03.PNG" alt="Shared Folders Configuration 03" title="Shared Folders Configuration 03"><br>Unfortunately,
  you probably can’t access it right now, because VirtualBox only allows the <em>root</em> account to access this folder. The easiest solution I found was to open a Terminal, and add yourself in the virtualbox (vboxsf) group, to have full access to this
  folder (replace “username” with your ubuntu login)<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">sudo usermod -G vboxsf -a username</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>Reboot the machine, and you should now have access to your windows files.</p>
<h1 id="Terminal">
  <a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h1>
<h2 id="What-is-it">
  <a href="#What-is-it" class="headerlink" title="What is it?"></a>What is it?</h2>
<blockquote>
  <p>“Under Linux there are GUIs (graphical user interfaces), where you can point and click and drag, and hopefully get work done without first reading lots of documentation. The traditional Unix environment is a CLI (command line interface), where you type
    commands to tell the computer what to do. That is faster and more powerful, but requires finding out what the commands are.”</p>
</blockquote>
<p>The terminal can be seen as a more powerful version of Windows “cmd”. More powerful also means more “dangerous”, but don’t worry, you won’t break your environment so easily.</p>
<h2 id="What-can-I-do-with-it">
  <a href="#What-can-I-do-with-it" class="headerlink" title="What can I do with it?"></a>What can I do with it?</h2>
<p>Pretty much everything. Using the terminal, you can install applications, update your system, edit and search for files, automate tasks, and much more.<br>In this last section, I will show you some very basic commands (some of them may be similar or identical
  to the Windows ones)</p>
<h3 id="cd">
  <a href="#cd" class="headerlink" title="cd"></a>cd</h3>
<p><strong>cd</strong> can be used to open a directory. Let’s say you want to open your home directory (that’s basically “My documents” from Windows), you can simply type<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">cd /home/username</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>or use this shortcut<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">cd ~</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>If you want to go “up” a directory, use <code>..</code>. If you want to reference the current directory, use <code>.</code><br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">cd ../../Dev/java/</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h3 id="pwd">
  <a href="#pwd" class="headerlink" title="pwd"></a>pwd</h3>
<p><strong>pwd</strong> is not related to the password (that’s actually <strong>passwd</strong>), but instead, it will print the current directory<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td>
        <td class="code"><pre><div class="line">kyne@kyne-VirtualBox:~$ pwd</div><div class="line">/home/kyne</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h3 id="ls">
  <a href="#ls" class="headerlink" title="ls"></a>ls</h3>
<p><strong>ls</strong> prints the content of a directory. Options <code>-la</code> will print more details.<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td>
        <td class="code"><pre><div class="line">kyne@kyne-VirtualBox:~$ ls -la</div><div class="line">total 244</div><div class="line">drwxr-xr-x  36 kyne kyne  4096 déc  4 15:17 .</div><div class="line">drwxr-xr-x   3 root root  4096 nov 12 20:03 ..</div><div class="line">drwx------   3 kyne kyne  4096 nov 27 12:05 .adobe</div><div class="line">drwxr-xr-x   2 kyne kyne  4096 nov 12 20:35 .android</div><div class="line">drwxr-xr-x   9 kyne kyne  4096 nov 27 16:02 .atom</div><div class="line">drwxr-xr-x   2 kyne kyne  4096 nov 12 20:24 .babel-cache</div><div class="line">-rw-------   1 kyne kyne  7152 déc  4 15:16 .bash_history</div><div class="line">-rw-r--r--   1 kyne kyne   220 nov 12 20:03 .bash_logout</div><div class="line">-rw-r--r--   1 kyne kyne  3754 nov 27 19:38 .bashrc</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>You can filter the results using <em>pipes</em>. Pipes can be very complex, so I won’t cover that in this post. Basically, pipes sends the result of a command to the next command <em>(if you have worked with <a href="https://angularjs.org/" target="_blank" rel="external">Angular</a>) before, it’s basically the same as the Angular pipes. Well, technically, it’s the other way around)</em>.<br>The
  pipe we will use here is <strong>grep</strong>. It can be used to filter texts, even by using regular expression. If you want to list all <em>PNG</em> files inside a folder :<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">ls /home/kyne/Images | grep &quot;.png&quot;</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h3 id="rm">
  <a href="#rm" class="headerlink" title="rm"></a>rm</h3>
<p><strong>rm</strong> will remove a file or directory. Be careful with the “recursive” <code>-R</code> version, as it will remove everything inside the target. The most dangerous option is the combination of “recursive” <em>and</em> “force” <code>-f</code>.
  If you run it on the root folder, using the administrator account, you can simply destroy your entire system. So always check twice the command you will run.<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">rm /home/kyne/tmp/file.txt</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h3 id="sudo">
  <a href="#sudo" class="headerlink" title="sudo"></a>sudo</h3>
<p>Ubuntu use accounts to login into the system. But there is one account that acts as the administrator. This account is always called <strong>root</strong>, and can be required to perform some tasks, such as installing applications of updating the system.
  To switch to the root account, you can type<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">sudo su</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>This will prompt you for your password. That means users can become administrator using their own password (this can be disabled on servers to increase the security).<br>If you want to run a command as root, simply prefix it with “sudo”<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td>
        <td class="code"><pre><div class="line">kyne@kyne-VirtualBox:~$ ls /root -la</div><div class="line">ls: cannot read directory &apos;/root&apos;: Permission denied</div><div class="line">kyne@kyne-VirtualBox:~$ sudo ls /root -la</div><div class="line">total 48</div><div class="line">drwx------ 10 root root 4096 déc  1 19:25 .</div><div class="line">drwxr-xr-x 24 root root 4096 nov 30 19:41 ..</div><div class="line">-rw-r--r--  1 root root 3106 oct 22  2015 .bashrc</div><div class="line">drwx------  4 root root 4096 déc  2 17:04 .cache</div><div class="line">drwxr-xr-x  6 root root 4096 déc  1 19:23 .config</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h3 id="Update-the-system">
  <a href="#Update-the-system" class="headerlink" title="Update the system"></a>Update the system</h3>
<p>Updating your applications is very easy, and takes only two steps.<br>The first one will update all repositories, to ensure they are using the last version of all packages.<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">sudo apt-get update</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>Then, you can start the upgrade by running<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">sudo apt-get upgrade</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h3 id="Installing-an-application">
  <a href="#Installing-an-application" class="headerlink" title="Installing an application"></a>Installing an application</h3>
<p>Installing an application only requires you to know its package name.<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">sudo apt-get install firefox</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>To search for a package, you can use this command<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">apt-cache search keyword</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>To remove an application, simply type<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">sudo apt-get remove firefox</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h3 id="Starting-an-application">
  <a href="#Starting-an-application" class="headerlink" title="Starting an application"></a>Starting an application</h3>
<p>Usually, you can start an application from the terminal. For example, if you want to quickly edit a file with <em>Gedit</em><br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">gedit /home/kyne/Dev/web/blog/_config.yml</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>Or you can open <em>Atom</em> and set your workspace as the current directory<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td>
        <td class="code"><pre><div class="line">cd /home/kyne/web/blog</div><div class="line">atom .</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<h1 id="Conclusion">
  <a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1>
<p>I think we have covered a lot of stuff today. There is still much to cover, but I think you now have enough basic knowledge to continue on your own.<br>You will find plenty of tutorials and forums around the web to help you use Ubuntu.<br>In the next
  tutorials, we will probably learn more about <em>Atom</em>, and I may also do a quick tutorial on GIMP.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Here we are, at the third and last part of this guide. In this post, I’ll try to cover what programs you can use for most of your tasks, but also give you an introduction to the terminal.&lt;/p&gt;
&lt;p&gt;Please keep in mind that we didn’t install Ubuntu to replace Windows : we are working in a virtual environment, meaning we can’t expected to play games (we even disabled 3D acceleration…). Focus will be done on development : web browsing, coding, files
  and pictures editing, etc.&lt;/p&gt;
&lt;p&gt;Let’s dive right into it !&lt;br&gt;
    
    </summary>
    
      <category term="Operating System" scheme="http://kynesilverhide.github.io/categories/Operating-System/"/>
    
    
      <category term="ubuntu" scheme="http://kynesilverhide.github.io/tags/ubuntu/"/>
    
      <category term="virtualbox" scheme="http://kynesilverhide.github.io/tags/virtualbox/"/>
    
      <category term="unity" scheme="http://kynesilverhide.github.io/tags/unity/"/>
    
      <category term="unix" scheme="http://kynesilverhide.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>Discovering and installing Ubuntu in VirtualBox (Part 2)</title>
    <link href="http://kynesilverhide.github.io/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/"/>
    <id>http://kynesilverhide.github.io/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/</id>
    <published>2016-11-30T18:41:26.000Z</published>
    <updated>2016-12-02T15:54:01.078Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome back to the second part of this tutorial. We’ll continue right were we left. In this second part, we’ll install Ubuntu and do some last tweaks to our installation.<br>At the end of this post, you should have a working virtual operating system.</p>
<p><em>Note : I’ll do a third (and final) part to help your learn and configure Ubuntu.</em></p>
<p>Let’s get going !<br>
  <a id="more"></a>
</p>
<h1 id="Installation">
  <a href="#Installation" class="headerlink" title="Installation"></a>Installation</h1>
<p>Installing Ubuntu is very easy. It’s probably the easiest installation of all Unix systems. Everything is done using a graphical interface, were you just have to answer some questions and hit “continue” (yes, that’s very Windows-like).</p>
<p>To start with, select your image in Virtual box, and click start (or double-click on the image). This will ask for the start-up disk. Just click on the yellow folder (with a green arrow), and browse to the downloaded <code>.iso</code> file. Then, click
  <em>Start</em>.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install01.PNG" alt="Installation Step 1" title="Installation Step 1"></p>
<p>The install software will start loading by itself…<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install02.PNG" alt="Installation Step 2" title="Installation Step 2"></p>
<p>… until you see what looks like a basic desktop. Don’t worry too much if the resolution is small, you should be able to resize the window. You are presented with two options.</p>
<ul>
  <li><strong>Try Ubuntu</strong> : This will run a live version of Ubuntu, but any changes you do will be lost on reboot. It can be used to test Ubuntu on your computer without installing anything (<em>Note : it can also be used to restore or recover files from an OS that won’t boot.. as long as your computer is running properly</em>)</li>
  <li><strong>Install Ubuntu</strong> This is the option we will use<img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install03.PNG" alt="Installation Step 3" title="Installation Step 3">
  </li>
</ul>
<p>Check both options to allow Ubuntu to install updates and some third-party softwares to handle proprietary formats (such as MP3 files, etc), then click on <em>Continue</em>.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install04.PNG" alt="Installation Step 4" title="Installation Step 4"></p>
<p>Choose the first option to use the whole disk (<em>remember, it’s a virtual file on your disk, so you can’t destroy your files outside the virtual machine</em>), and click <em>Install Now</em>.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install05.PNG" alt="Installation Step 5" title="Installation Step 5"></p>
<p>A popup will show you that two partitions will be created. One big partition using the <a href="https://en.wikipedia.org/wiki/Ext4" target="_blank" rel="external">ext4</a> filesystem, and one smaller <em>Swap</em> partition (<em>it may be useless now that all computers have plenty of RAM, but older computers could still need this when the amount of physical RAM is full</em>).<br>Click
  on <em>Continue</em>.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install06.PNG" alt="Installation Step 6" title="Installation Step 6"></p>
<p>Next steps is easy, just select your timezone, and click on <em>Continue</em>.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install07.PNG" alt="Installation Step 7" title="Installation Step 7"></p>
<p>Choose your keyboard layout, and hit <em>Continue</em>.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install08.PNG" alt="Installation Step 8" title="Installation Step 8"></p>
<p>Now, you’ll have to choose a login and password. Ubuntu supports multiple accounts like most operating systems. Once it’s done, click <em>Continue</em>.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install09.PNG" alt="Installation Step 9" title="Installation Step 9"></p>
<p>This time, the real installation will start, and the files will be copied onto the virtual disk. You can read what’s on screen to learn a bit more about Ubuntu, or just grab a cup of coffee until the process is finished.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install10.PNG" alt="Installation Step 10" title="Installation Step 10"></p>
<p>Once the installation is complete, you’ll have to restart the virtual machine (not your computer).<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install11.PNG" alt="Installation Step 11" title="Installation Step 11"></p>
<p>Ubuntu will ask you to hit <em>ENTER</em> and then remove the installation disk. Fortunately, VirtualBox will do that for you, and turn off the fake CD drive that was reading the ISO file.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install12.PNG" alt="Installation Step 12" title="Installation Step 12"></p>
<p>Once restarted, you should see the Ubuntu login screen. If you properly setup the keyboard, you should have no problem to selected your account and type your password. Note hat the “Guest Session” is similar to the “Try Ubuntu” option we saw before. Everything
  will be cleared out at the end of the session.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install13.PNG" alt="Installation Step 13" title="Installation Step 13"></p>
<p>Ok, some final tweaks before using our brand new system. First, we’ll install the <em>Guest Additions</em> by going into the VirtualBox menu, and clicking on “Insert Guest Additions CD image…”. This will allow some features between your computer and the
  virtual machine, such as a shared clipboard, etc.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install14.PNG" alt="Installation Step 14" title="Installation Step 14"></p>
<p>This will once again emulates a CD drive that will be automatically discovered by Ubuntu. Just click on <em>Run</em> when this popup shows.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install15.PNG" alt="Installation Step 15" title="Installation Step 15"></p>
<p>A terminal will start and display some logs. Just wait for the “Press Return to close this window” to show. Hit <em>Enter</em> and the terminal will close.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install16.PNG" alt="Installation Step 16" title="Installation Step 16"></p>
<p>Now, go to the VirtualBox menu, click <em>Devices</em> and enable the bidirectional clipboard. Then, restart Ubuntu by going to the top right icon <em>(the “power icon that looks like a gear”)</em> and shutdown the system.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-Virtual-Box-P2/ubuntu-install17.PNG" alt="Installation Step 17" title="Installation Step 17"></p>
<p>Now, reboot your operating system. And <em>Voila</em>, you have a fully operational operating system that can be used to work on your home development projects.</p>
<h1 id="Conclusion">
  <a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1>
<p>Using Ubuntu is not hard, but you will probably struggle a bit at the beginning. That’s why I will write a full third part to this guide to help you discover your new desktop.</p>
<p>But here are some hints to help you wait the next post :</p>
<ul>
  <li>If you press the “Windows” key (I think it’s the “Command” key on Mac…), a global search will be triggered. Yo can search for applications, files or configurations menu. You can also just click on the top left icon in the <em>Unity</em> menu. (the left
    bar with all the big icons)</li>
  <li><strong>Firefox</strong> : Firefox is installed by default, and is a very functional web browser. On Ubuntu, it seems to work a bit better than <a href="https://www.chromium.org/" target="_blank" rel="external">Chromium</a> <em>(it’s the open-source web browser project from which Google Chrome draws its source code)</em>.
    So you can start browsing the Internet as usual</li>
  <li><strong>Terminal</strong> : This is where you can type your commands. It’s actually very powerful, and can make you save a lot of time. We’ll use it later on to install more stuff.</li>
  <li><strong>Files</strong> : The file explorer should also be available on the left, but you won’t have access to your Windows files for now. This will be covered in the next post.</li>
  <li><strong>System configuration</strong> : This is similar to Windows “Control Panel”. Most of the configuration can be done there, from changing the wallpaper to switching to another keyboard layout.</li>
  <li><strong>Ubuntu-software</strong> : This application can help you install new software, simply by searching for them by names. This is one major changes from Windows : in most Unix systems (if not all…), applications are hosted on <em>repositories</em>,
    and you can install them without having to look them up on the Internet. Some repositories have to be added manually <em>(or enabled)</em>, and some applications are still distributed as <code>.deb</code> files (Debian packages), but they can be installed
    simply by double-clicking on them.</li>
</ul>
<p>Finally, you can switch to fullscreen mode in VirtualBox by hitting <code>HOST-KEY + F</code>. “HOST-KEY” is “Right CTRL” on Windows. Simply press the same keys to go back to windowed mode.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome back to the second part of this tutorial. We’ll continue right were we left. In this second part, we’ll install Ubuntu and do some last tweaks to our installation.&lt;br&gt;At the end of this post, you should have a working virtual operating system.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note : I’ll do a third (and final) part to help your learn and configure Ubuntu.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Let’s get going !&lt;br&gt;
    
    </summary>
    
      <category term="Operating System" scheme="http://kynesilverhide.github.io/categories/Operating-System/"/>
    
    
      <category term="ubuntu" scheme="http://kynesilverhide.github.io/tags/ubuntu/"/>
    
      <category term="virtualbox" scheme="http://kynesilverhide.github.io/tags/virtualbox/"/>
    
      <category term="unity" scheme="http://kynesilverhide.github.io/tags/unity/"/>
    
      <category term="unix" scheme="http://kynesilverhide.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>Discovering and installing Ubuntu in VirtualBox (Part 1)</title>
    <link href="http://kynesilverhide.github.io/2016/11/30/Discovering-and-installing-Ubuntu-in-VirtualBox/"/>
    <id>http://kynesilverhide.github.io/2016/11/30/Discovering-and-installing-Ubuntu-in-VirtualBox/</id>
    <published>2016-11-30T18:41:26.000Z</published>
    <updated>2016-12-02T12:40:21.335Z</updated>
    
    <content type="html"><![CDATA[<p>If you are working as a developer, if you have some technical background, or simply if you label yourself as a bit geeky, you are probably aware that Windows is not the only operating system in the world (this is especially true if you are reading this
  blog on a Mac). Even your smartphone is probably running on Android instead of Windows (Phone).</p>
<p>Arguing about the best of them is pointless. Each one of them has pros and cons, from their price to their “user-friendliness”.</p>
<p> My goal in this post will be to show you Ubuntu, a free and open-source operating system based on Linux, and convince you that it is a very solid alternative to Windows <em>as a development environment</em>, that it’s easy to setup, easy to use, and completely
  free. And to achieve that, I will show you how to install it without running a single command in terminal, and without any risk of losing your data.</p>
<p> <em>Note that this tutorial will be split into multiple posts. This one is the first part.</em></p>
<a id="more"></a>
<h1 id="What-is-Ubuntu">
  <a href="#What-is-Ubuntu" class="headerlink" title="What is Ubuntu"></a>What is Ubuntu</h1>
<p>Ok, so first, you probably want to learn more about Ubuntu. Why did I choose this operating system (OS)? What does it do?<br>I’ll start by quoting <a href="https://en.wikipedia.org/wiki/Ubuntu_(operating_system" target="_blank" rel="external">Wikipedia</a>) :</p>
<blockquote>
  <p>Ubuntu is a Debian-based Linux operating system for personal computers, tablets and smartphones where Ubuntu Touch edition is used; and also runs network servers, usually with the Ubuntu Server edition, either on physical or virtual servers (such as
    on mainframes) and/or with containers, that is with enterprise-class features; runs on the most popular architectures, including server-class ARM-based.</p>
</blockquote>
<p>Yes.. that seems very technical, and not useful at all. So let’s split this information.</p>
<ul>
  <li><a href="https://en.wikipedia.org/wiki/Linux" target="_blank" rel="external">Linux</a> is a UNIX-like operating system : it shares a common base with MacOS and other operating systems, but this one is based on a free and open-source model. Also, this is actually a very basic OS on
    top of which other elements are built.</li>
  <li><a href="https://en.wikipedia.org/wiki/Debian" target="_blank" rel="external">Debian</a> is what we will call a Linux distribution. Simply put, it’s a set of programs packaged together to build a fully functional OS. We could install Debian as it is, but we want something a little
    bit more user friendly and “cool”</li>
  <li><a href="https://www.ubuntu.com/" target="_blank" rel="external">Ubuntu</a> is based on Debian. You could see it as some kind of an “experimental” version of Debian, with more updates and recent features. But fear not, it’s actually quite stable</li>
</ul>
<h2 id="But-what-does-it-looks-like">
  <a href="#But-what-does-it-looks-like" class="headerlink" title="But what does it looks like?"></a>But what does it looks like?</h2><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-VirtualBox/ubuntu-desktop.png" alt="Ubuntu desktop with Firefox, Rythmbox, a terminal and the file explorer" title="Ubuntu desktop with Firefox, Rythmbox, a terminal and the file explorer">
<p>As you can see, this is not an obscure <em>ASCII</em> terminal in black and white, and it’s not the Matrix either.</p>
<h2 id="And-why-would-I-need-it">
  <a href="#And-why-would-I-need-it" class="headerlink" title="And why would I need it?"></a>And why would I need it?</h2>
<p>As I said in the introduction, the goal is to install a very powerful development environment. Because let’s face it, while Windows will get the job done, it’s not the most efficient (it could actually be the worst of all) when it comes to pure development
  (especially coding). If you have read my first post on <a href="/2016/11/26/Hello-World/">how to install <em>Hexo</em></a>, you probably saw that installing something on Mac and Linux (I will say “Linux” when I’m referring to Unix-based operating system
  that are not MacOS) is most of the time done by running the proper command, while windows requires a dedicated installer that won’t integrate everything as smoothly.</p>
<p>I will always try to add alternatives for Windows users on my next posts, but you should really give Ubuntu a try if you want to invest some time in custom projects at home.</p>
<h2 id="Installation">
  <a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2>
<p>When installing Ubuntu, you basically have three options</p>
<ul>
  <li>Installing it on top of windows, losing all your files and programs (if you own an old laptop that you were planning to trash for example, it could be the easiest solution)</li>
  <li>Installing it next to windows, by splitting your hard drive into two partitions (or more)</li>
  <li>Installing it in a virtual environment</li>
</ul>
<p>In this post, we’ll cover the third option and install <a href="https://www.virtualbox.org/" target="_blank" rel="external">VirtualBox</a> to host our virtual OS.<br>Just go to <a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">https://www.virtualbox.org/wiki/Downloads</a> and choose
  the “Windows hosts” or “OSX (Mac) hosts” (if you are already on another Linux distribution, it’s also possible, but I think you already know all the details).</p>
<p>Install VirtualBox as any other software and start it.</p>
<h3 id="Creating-the-machine">
  <a href="#Creating-the-machine" class="headerlink" title="Creating the machine"></a>Creating the machine</h3>
<p>The first step is to create a new virtual machine. Just click the “New” button in the top left corner.<br>This will start an assistant to help you setup your virtual machine. Let’s do this together</p>
<p>First, you’ll have to choose a name for your machine. Pick anything you want, but don’t forget to select the proper type and version (Linux and Ubuntu 64)<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-VirtualBox/vbox_install01.PNG" alt="Installation Step 1" title="Installation Step 1"></p>
<p>Keep the default values for the memory, we’ll adjust it later. Click next, and choose to create a new virtual hard disk now. This will create a big file on your disk that contains the whole system.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-VirtualBox/vbox_install02.PNG" alt="Installation Step 2" title="Installation Step 2"></p>
<p>For every other steps, keep the default values. If you wish, you can use a “fixed sized” disk to create one single big file <em>(I choose this option, but it may be harder to resize the disk later on)</em>. We’ll continue tweaking the machine once it’s
  created. For the disk size, I recommend using at least <strong>10 Gb</strong> (But if you can afford the space, use 16 or even 20Gb).</p>
<h3 id="Tweaking-the-machine">
  <a href="#Tweaking-the-machine" class="headerlink" title="Tweaking the machine"></a>Tweaking the machine</h3>
<p>Once the machine is created, select it, and click on “Settings”.</p>
<p>Go to <em>System</em>. For the RAM, I decided to use half my RAM (4Gb/8Gb). You shouldn’t need more than 4Gb anyway.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-VirtualBox/vbox_config01.PNG" alt="Configuration Step 1" title="Configuration Step 1"></p>
<p>Go to the next tab, and try to use as many CPUs as available (don’t go into the red part of the slider)<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-VirtualBox/vbox_config02.PNG" alt="Configuration Step 2" title="Configuration Step 2"></p>
<p>Next tab. Use the same settings as the one from this screenshot.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-VirtualBox/vbox_config03.PNG" alt="Configuration Step 3" title="Configuration Step 3"></p>
<p>You can now open the <em>Display</em> section. Move the slider to the right until you reach 128mb.. or lower if your graphic card is old.<br>Right now, I’ve disabled 3D acceleration because it causes some problem in a virtual environment (you can’t take
  screenshots for example).<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-VirtualBox/vbox_config04.PNG" alt="Configuration Step 4" title="Configuration Step 4"><br>I also manually changed some configuration file to use 256Mb. Without 3D
  acceleration, I don’t think it will matter much, but if you want, simply edit the <code>.vbox</code> file (right click on your virtual machine and select “Show in Explorer”) with any text editor, and change the following row :<br>
  <figure class="highlight xml">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Display</span> <span class="attr">VRAMSize</span>=<span class="string">"256"</span> <span class="attr">monitorCount</span>=<span class="string">"1"</span> <span class="attr">accelerate3D</span>=<span class="string">"false"</span> <span class="attr">accelerate2DVideo</span>=<span class="string">"false"</span>/&gt;</span></div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>Lastly, I only managed to have proper audio by using <em>Intel HD Audio</em>. You can try other settings if you want.<br><img src="/2016/11/30/Discovering-and-installing-Ubuntu-in-VirtualBox/vbox_config05.PNG" alt="Configuration Step 5" title="Configuration Step 5"></p>
<h2 id="What’s-next">
  <a href="#What’s-next" class="headerlink" title="What’s next ?"></a>What’s next ?</h2>
<p>I’m sorry, but we have reached the end of this first part. Don’t worry, next part will follow quickly.<br>You now have a properly setup virtual machine, but it’s still empty. In the next post, we’ll install Ubuntu together, and I will keep my promise
  : we won’t use any terminal.</p>
<p>To prepare for this next post, you can start downloading Ubuntu 64 here : <a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="external">https://www.ubuntu.com/download/desktop</a><br>Click on <em>Download</em>, and then, decide if you want to pay or not by adjusting
  the sliders. Don’t feel ashamed to use it for free.<br>You won’t need any additional software to use the download <code>.iso</code> file, VirtualBox will take care of it.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you are working as a developer, if you have some technical background, or simply if you label yourself as a bit geeky, you are probably aware that Windows is not the only operating system in the world (this is especially true if you are reading this
  blog on a Mac). Even your smartphone is probably running on Android instead of Windows (Phone).&lt;/p&gt;
&lt;p&gt;Arguing about the best of them is pointless. Each one of them has pros and cons, from their price to their “user-friendliness”.&lt;/p&gt;
&lt;p&gt; My goal in this post will be to show you Ubuntu, a free and open-source operating system based on Linux, and convince you that it is a very solid alternative to Windows &lt;em&gt;as a development environment&lt;/em&gt;, that it’s easy to setup, easy to use, and completely
  free. And to achieve that, I will show you how to install it without running a single command in terminal, and without any risk of losing your data.&lt;/p&gt;
&lt;p&gt; &lt;em&gt;Note that this tutorial will be split into multiple posts. This one is the first part.&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Operating System" scheme="http://kynesilverhide.github.io/categories/Operating-System/"/>
    
    
      <category term="ubuntu" scheme="http://kynesilverhide.github.io/tags/ubuntu/"/>
    
      <category term="virtualbox" scheme="http://kynesilverhide.github.io/tags/virtualbox/"/>
    
      <category term="unity" scheme="http://kynesilverhide.github.io/tags/unity/"/>
    
      <category term="unix" scheme="http://kynesilverhide.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>Hello World, and building your own blog</title>
    <link href="http://kynesilverhide.github.io/2016/11/26/Hello-World/"/>
    <id>http://kynesilverhide.github.io/2016/11/26/Hello-World/</id>
    <published>2016-11-26T13:27:16.000Z</published>
    <updated>2016-11-29T20:08:53.788Z</updated>
    
    <content type="html"><![CDATA[<p>Hi ! I’m Aurélien, but you’ll find me around on the web as Kyne, or KyneSilverhide. I’m a developer from Belgium (yes, we have beer and chocolate).</p>
<p>I’ve recently learned about <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>, a very powerful tool to build “static blogs”, using <a href="https://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a> and some command lines. As most developers should know, the best
  way to test or learn something is by using it in a real project. That’s why I’ve decided to start this blog mostly about programming stuff, and technologies.</p>
<p>In this very first post, I’ll show you how to install Hexo for you own blog, and host it on <a href="https://github.com/" target="_blank" rel="external">Github</a> (for free, of course).<br>Also, English is not my main language, so I hope everything will be as smooth as possible.</p>
<a id="more"></a>
<h1 id="Github">
  <a href="#Github" class="headerlink" title="Github"></a>Github</h1>
<h2 id="Create-your-account">
  <a href="#Create-your-account" class="headerlink" title="Create your account"></a>Create your account</h2>
<p>Any developer should already know about Github. Basically, it will host your source code for free, and keep an history of changes using a version control system called <a href="https://git-scm.com/" target="_blank" rel="external">Git</a> (we may talk about this later…). Fortunately,
  you don’t need to know GIT in this case, because Hexo has already automated everything for you, so you can focus on writing content.<br>So, head over to <a href="https://github.com/" target="_blank" rel="external">https://github.com/</a>, create an account, and we’ll meet again in
  the next section.</p>
<h2 id="Creating-your-first-repository">
  <a href="#Creating-your-first-repository" class="headerlink" title="Creating your first repository"></a>Creating your first repository</h2>
<p>Once your account is created, we’ll create a repository to store our website. But we won’t build a basic repository. Instead, we’ll use a “new” functionality from Github called <a href="https://pages.github.com/" target="_blank" rel="external">Githut Pages</a>. I won’t go into the
  details, but this will allow your blog (or website) to be accessible at “<a href="http://username.github.io" target="_blank" rel="external">http://username.github.io</a>“. As long as you only hosts static pages and assets (javascript, css, pictures…), everything is taken care of.</p>
<p>Your repository <strong>must</strong> be called “username.github.io” (where username is your github username). From my experience, it’s seems case-insensitive.<br>Once created, we’ll need to download it on your computer. And to achieve that, we need to
  install Git.</p>
<ul>
  <li>For windows users, the installation can be downloaded here : <a href="https://git-scm.com/download/win" target="_blank" rel="external">https://git-scm.com/download/win</a></li>
  <li>For UNIX users, you should easily find the installation steps here : <a href="https://git-scm.com/download/linux" target="_blank" rel="external">https://git-scm.com/download/linux</a></li>
  <li>For MAC users, head over to this page : <a href="https://git-scm.com/download/mac" target="_blank" rel="external">https://git-scm.com/download/mac</a></li>
</ul>
<p>Once Git is installed, open a terminal (or Git-Bash on windows), and go to your workspace (If you don’t have one, just pick a folder somewhere on your computer)<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td>
        <td class="code"><pre><div class="line">cd /path/to/my/workspace</div><div class="line">git clone https://github.com/username/username.github.io</div><div class="line">cd username.github.io</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p><em>(don’t forget to replace “username” with your github username)</em></p>
<p>Using any text editor or IDE, create a new file called index.html inside the newly created folder, and fill it with anything your want (as long as it’s valid HTML.. of course)<br>
  <figure class="highlight html">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td>
        <td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;<span class="name">h1</span>&gt;</span></div><div class="line">This is my website hosted on Github pages</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>And then, in order to publish everything on Github, we’ll need to type some GIT commands. Don’t worry, it’s the only time.<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td>
        <td class="code"><pre><div class="line">git add --all</div><div class="line">git commit -m &quot;Initial commit&quot;</div><div class="line">git push -u origin master</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>If you have already worked with any other VCS <em>(Version Control System)</em>, these commands may look familiar. The main difference between Git and SVN or CVS is that you first have to “commit” your changes to a local repository, and then “push” everything
  to the remote server.</p>
<p>You should now be able to access your website in your favorite web browser by accessing this URL : <a href="http://username.github.io" target="_blank" rel="external">http://username.github.io</a></p>
<h1 id="Hexo">
  <a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1>
<h1 id="Installing-Node-and-NPM">
  <a href="#Installing-Node-and-NPM" class="headerlink" title="Installing Node and NPM"></a>Installing Node and NPM</h1>
<p>Ok, if you are still reading this, let’s continue with <a href="https://nodejs.org/en/" target="_blank" rel="external">Node</a> and <a href="https://www.npmjs.com/" target="_blank" rel="external">NPM</a>. NPM is nothing more than a package manager. It will help you install program, libraries, etc.. and handle dependencies.</p>
<p>Go to <a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a> and choose the proper installer for your operating system (Node comes with NPM installed). If you are using windows, you should continue using <em>Git-Bash</em> as your
  terminal (it emulates some features from Unix-based terminals). <a href="http://cmder.net/" target="_blank" rel="external">Cmder</a> is another great terminal on Windows that you may consider using for this tutorial.</p>
<h1 id="Installing-Hexo">
  <a href="#Installing-Hexo" class="headerlink" title="Installing Hexo"></a>Installing Hexo</h1>
<p>Once Node is installed, let’s finally start installing Hexo. (<em>On UNIX environments, you will need to run this command as the administrator</em>)<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>Now, somewhere in your workspace, let’s setup a new folder that will contain your blog</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td>
      <td class="code"><pre><div class="line">cd /path/to/my/workspace</div><div class="line">hexo init blog</div><div class="line">cd blog</div><div class="line">npm install</div></pre></td>
    </tr>
  </table>
</figure>
<h1 id="Configuring-the-blog">
  <a href="#Configuring-the-blog" class="headerlink" title="Configuring the blog"></a>Configuring the blog</h1>
<p>The first step is to change the basic configuration defined in <code>_config.yml</code> (by the way, .yml files, for <a href="http://yaml.org/" target="_blank" rel="external">YAML</a>, are just plain text files using indentation to define the structure. With XML and JSON, these are
  the main formats for configuration files)</p>
<figure class="highlight yaml">
  <table>
    <tr>
      <td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td>
      <td class="code"><pre><div class="line"><span class="attr">title:</span> My awesome blog</div><div class="line"><span class="attr">subtitle:</span> Made with Hexo</div><div class="line"><span class="attr">description:</span> Some more text</div><div class="line"><span class="attr">author:</span> KyneSilverhide</div><div class="line"><span class="attr">language:</span> en</div><div class="line"><span class="attr">timezone:</span> Europe/Brussels</div><div class="line"></div><div class="line"><span class="attr">url:</span> http://username.github.io</div><div class="line"><span class="attr">root:</span> /</div><div class="line"><span class="attr">permalink:</span> :year/:month/:day/:title/</div><div class="line"><span class="attr">permalink_defaults:</span></div></pre></td>
    </tr>
  </table>
</figure>
<p>Everything else can be left with the default values.</p>
<h1 id="Creating-a-post">
  <a href="#Creating-a-post" class="headerlink" title="Creating a post"></a>Creating a post</h1>
<p>Save the configuration file, and go back to the terminal. Let’s write our first post.<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">hexo new post &quot;My first post&quot;</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p>All your posts are created inside the <code>source/_posts</code> folder. Open the <code>.md</code> file (for Markdown) matching your post title, and edit it.</p>
<figure class="highlight markdown">
  <table>
    <tr>
      <td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td>
      <td class="code"><pre><div class="line">---</div><div class="line">title: My first post</div><div class="line">date: 2016-11-26 14:27:16</div><div class="line">tags: [blog]</div><div class="line"><span class="section">categories: [Blog]</span></div><div class="line">---</div><div class="line">This is my first post ! I'm so happy.</div></pre></td>
    </tr>
  </table>
</figure>
<p>Note : some themes may allow additional elements, such as a thumbnail, a banner, etc.<br>Tags and categories may not be shown depending on your theme, but it seems to be a good practice to fill them. If you want to add multiple tags or categories, just
  put a <code>,</code> between each.</p>
<p>Ok, now that we have some content, we want to preview it before deploying everything to Github. But if you remember right, Hexo is a tool used to build <em>static blogs</em>. This means we have to “build” our site first, using this simple command :<br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">hexo generate</div></pre></td>
      </tr>
    </table>
    </figure>
</p>
<p>You’ll see some files being created or updated, and then you are done. Now, let’s see a preview. Another great feature with Hexo, is that you don’t need to setup a web server such as Apache. You just have to run this command :</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td>
      <td class="code"><pre><div class="line">hexo server</div><div class="line"></div><div class="line">INFO  Start processing</div><div class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</div></pre></td>
    </tr>
  </table>
</figure>
<p>Open the given url <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> in your browser, and you should see your first post !</p>
<p>If you want to know more about the Markdown syntax that you can use in your posts, just head over to this <a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#code" target="_blank" rel="external">Markdown CheatSheet</a>.<br>This syntax can also be used in some
  Wikis and other tools.</p>
<h1 id="Publishing-it-to-Github">
  <a href="#Publishing-it-to-Github" class="headerlink" title="Publishing it to Github"></a>Publishing it to Github</h1>
<p>If everything works fine, it’s time to show your blog to the world. Let’s start by some configuration. Open <code>_config.yml</code>, and change this part</p>
<figure class="highlight yaml">
  <table>
    <tr>
      <td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td>
      <td class="code"><pre><div class="line"><span class="attr">deploy:</span></div><div class="line"><span class="attr">  type:</span> git</div><div class="line"><span class="attr">  repository:</span> https://github.com/username/username.github.io.git</div><div class="line"><span class="attr">  branch:</span> master</div></pre></td>
    </tr>
  </table>
</figure>
<p>Of course, you have to change “username” with your Github account.<br>Don’t forget that you need to generate your blog content before deploying it. You have three options</p>
<p><strong>Manually generating and then deploying</strong><br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td>
        <td class="code"><pre><div class="line">hexo generate</div><div class="line">hexo deploy</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<p><strong>Using any of these two shortcuts</strong><br>
  <figure class="highlight plain">
    <table>
      <tr>
        <td class="gutter"><pre><div class="line">1</div></pre></td>
        <td class="code"><pre><div class="line">hexo generate --deploy</div></pre></td>
      </tr>
    </table>
  </figure>
</p>
<figure class="highlight plain">
  <table>
    <tr>
      <td class="gutter"><pre><div class="line">1</div></pre></td>
      <td class="code"><pre><div class="line">hexo deploy --generate</div></pre></td>
    </tr>
  </table>
</figure>
<p>During the deployment, you’ll be asked for your Github login and password. Fill them in, and the deployment process should continue.<br>This will also remove the test <code>index.html</code> that we wrote at the beginning of this tutorial. Don’t worry,
  we won’t need it anymore.</p>
<p>Your blog should now be accessible at <a href="http://username.github.io" target="_blank" rel="external">http://username.github.io</a>. Congratulations !</p>
<h1 id="Conclusion">
  <a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1>
<p>Now that we have do so many awesome things <em>(yes, auto-congratulation is very important as a developer)</em>, let’s take a step back and list what we have accomplished today.</p>
<ul>
  <li>First, we have created a <strong>Github</strong> account to host our blog. But Github is also one of the best solution to host the source code of all your projects, so feel free to check their website.</li>
  <li>Then, we use some <strong>Git</strong> commands to send our test page to Github. Git is also a very famous tool (and my favorite VCS), but it can be hard to master, so I only scratched the surface in this blog. You should find some more tutorials on
    Github, or around the web.</li>
  <li>After this, we installed <strong>Node</strong> and <strong>NPM</strong>. If you are a web developer, you should already have these installed. There are so many libraries, projects and applications built on top of node, and available through NPM. But
    be aware that NPM seems to download the whole Internet each time you use it.</li>
  <li>The next step was to Install Hexo, and write some content. If you want to continue your blog, I recommend you to browse some of the <a href="https://hexo.io/themes/" target="_blank" rel="external">Hexo Themes</a>, learn more about <strong>Markdown</strong>, or read the <a href="https://hexo.io/docs/" target="_blank" rel="external">Hexo Documentation</a></li>
  <li>Lastly, we published our blog to Github. Feel free to test it on your tablet or mobile phone too !</li>
</ul>
<p>This concludes my first post. I hope that this tutorial have taught you something, or helped you somehow, and we’ll meet again in the next post !</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hi ! I’m Aurélien, but you’ll find me around on the web as Kyne, or KyneSilverhide. I’m a developer from Belgium (yes, we have beer and chocolate).&lt;/p&gt;
&lt;p&gt;I’ve recently learned about &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;, a very powerful tool to build “static blogs”, using &lt;a href=&quot;https://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; and some command lines. As most developers should know, the best
  way to test or learn something is by using it in a real project. That’s why I’ve decided to start this blog mostly about programming stuff, and technologies.&lt;/p&gt;
&lt;p&gt;In this very first post, I’ll show you how to install Hexo for you own blog, and host it on &lt;a href=&quot;https://github.com/&quot;&gt;Github&lt;/a&gt; (for free, of course).&lt;br&gt;Also, English is not my main language, so I hope everything will be as smooth as possible.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="http://kynesilverhide.github.io/categories/Programming/"/>
    
      <category term="Hexo" scheme="http://kynesilverhide.github.io/categories/Programming/Hexo/"/>
    
    
      <category term="blog" scheme="http://kynesilverhide.github.io/tags/blog/"/>
    
      <category term="hexo" scheme="http://kynesilverhide.github.io/tags/hexo/"/>
    
      <category term="github" scheme="http://kynesilverhide.github.io/tags/github/"/>
    
      <category term="git" scheme="http://kynesilverhide.github.io/tags/git/"/>
    
      <category term="markdown" scheme="http://kynesilverhide.github.io/tags/markdown/"/>
    
      <category term="node" scheme="http://kynesilverhide.github.io/tags/node/"/>
    
      <category term="npm" scheme="http://kynesilverhide.github.io/tags/npm/"/>
    
  </entry>
  
</feed>
